[package]
name = "mvv_client_search_soa"
version = "0.1.0"
edition = "2021"


[lib]
# We need it because some genious rust designer decided to consider any text in comments after 4 spaces as rust test !!!
# Geniuos !! Geniuos !! Geniuos !! Geniuos !! Geniuos !! Geniuos !! Geniuos !! Geniuos !! Geniuos !!
#
# doctest = false


[dependencies]
mvv_common = { version = "0.1.0", path = "../common", features = ["default", "tonic", "sqlx_08"] }
mvv_auth = { version = "0.1.0", path = "../auth", features = ["default", "tonic"] }
mvv_tuple_heter_iter = { version = "0.1.0", path = "../tuple_heter_iter" }
mvv_tuple_heter_iter_macro = { version = "0.1.0", path = "../tuple_heter_iter_macro" }

rust-embed.workspace = true

#tonic.workspace = true
# tls-rustls = ["dep:http", "dep:hyper", "dep:hyper-util", "dep:hyper-rustls", "dep:tower", "tower-http/util", "tower-http/add-extension", "dep:rustls-pemfile", "dep:tokio-rustls", "dep:pin-project", "dep:http-body-util"]
#tonic = { workspace = true, features = ["default", "prost", "channel", "transport", "tls", "tls-roots", "codegen", "server", "router"] }
tonic = { workspace = true, features = ["default", "prost", "channel", "transport", "tls"] }
tonic-types.workspace = true
tonic-reflection.workspace = true
tonic-async-interceptor.workspace = true

# T O D O: temp or not temp, since now 'tonic' crashs with rustls.
tower-http.workspace = true
axum-server.workspace = true
rustls.workspace = true
time.workspace = true

googleapis-tonic-google-type.workspace = true
#googleapis-tonic-google-api.workspace = true
#googleapis-tonic.workspace = true
prost.workspace = true
prost-types.workspace = true

#googleapis = { git = "https://github.com/googleapis/googleapis.git" }

serde.workspace = true
#serde_json.workspace = true
#serde_as.workspace = true
#serde_with.workspace = true

chrono.workspace = true
tokio.workspace = true
env_logger.workspace = true
dotenv.workspace = true
log.workspace = true

tracing.workspace = true
tracing-subscriber.workspace = true
tracing-futures.workspace = true
tracing-timing.workspace = true
#tracing-log.workspace = true
#tracing-attributes.workspace = true

anyhow.workspace = true
diesel.workspace = true
#diesel-async.workspace = true

fixedstr.workspace = true
uuid.workspace = true

tokio-stream.workspace = true
futures-util.workspace = true
async-stream.workspace = true

##pin-project.workspace = true
pin-project-lite.workspace = true

#tonic-health.workspace = true
#grpcio.workspace = true
#grpcio-health.workspace = true

axum-login.workspace = true
http.workspace = true
axum.workspace = true
tower.workspace = true
tower-service.workspace = true
hyper.workspace = true
tower-layer.workspace = true


# Currently in this project I use both 07/08 sqlx version as investigation
# how to use different version in lib crates.
# I'm not sure that it is good practice, but like example.
#
# To reuse code/macros which designed especially for sqlx 08
sqlx_08 = { version = "0.8.2", default-features = false, features = [
    "runtime-tokio", "postgres", "sqlx-postgres",
    # Using such features there can pick up sqlite (with compilation error)
    # "bigdecimal", "chrono", "uuid",
], path = "../diff_ver_crates/sqlx_08" }
sqlx_postgres_08 = { version = "0.8.2", features = [
    "bigdecimal", "chrono", "uuid" ], path = "../diff_ver_crates/sqlx_postgres_08" }
sqlx = { version = "0.8.2", default-features = false, features = [
    "runtime-tokio",
    "postgres", "sqlx-postgres",
    "macros", # required for #[derive(sqlx::FromRow)]
    "runtime-tokio-rustls",
    # Using such features there can pick up sqlite (with compilation error)
    # "bigdecimal", "chrono", "uuid",
] }
sqlx-postgres = { version = "0.8.2", features = [ "bigdecimal", "chrono", "uuid"] }


associative-cache.workspace = true

strum_macros.workspace = true
const_format.workspace = true
const-str.workspace = true
implicit-clone.workspace = true
extension-trait.workspace = true
itertools.workspace = true


[build-dependencies]
tonic-build.workspace = true
prost-build.workspace = true
