[package]
name = "mvv_account_soa"
version = "0.1.0"
edition = "2021"


#[profile.release]
#strip = "symbols"  # possible: "none", "debuginfo", "symbols" (default "none")


[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = [
    'cfg(feature, values("performance_tests", "special-integration-tests", "integration-tests", "integration_tests"))',
] }


[features]
# error_generic_member_access = []
# special-integration-test = []
# feature = "performance_tests"

serde_json_raw_value = ["serde_json/raw_value"]
ambassador = [ "dep:ambassador" ]

default = [ "ambassador", "serde_json_raw_value" ]

# Having 'integration_tests' conflicts with '--all-features' (we will need enable build with all features manually)
# If we use 'integration_tests' cfg paramete, it causes FULL rebuilds (of ALL dependencies) a lot of times.
# The easiest approach (at that moment) is using env variable which is set by 'cargo make' task
# in 'integration-test' task.
#
# integration_tests = []

[build-dependencies]
cargo_metadata.workspace = true


[dependencies]
mvv_error_macro = { version = "0.1.0", path = "../error_macro" }
mvv_proc_macro = { version = "0.1.0", path = "../proc_macro" }
mvv_common = { version = "0.1.0", path = "../common" }
mvv_auth = { version = "0.1.0", path = "../auth" }
mvv_tuple_heter_iter_macro = { version = "0.1.0", path = "../tuple_heter_iter_macro" }
mvv_tuple_heter_iter = { version = "0.1.0", path = "../tuple_heter_iter" }
# It is not used a lib, but we need it for docker image.
mvv_health_check = { version = "0.1.0", path = "../health_check", optional = true  }

# -------------------------------------------------------------------------
if_chain.workspace = true

static_assertions.workspace = true # 4 years gao
static_assertions_next.workspace = true # probably successor of 'static_assertions' ??
#const-zero = "0.1.1" # dperected, just redirection to 'std/core'

const_format.workspace = true
const-str.workspace = true
place_macro.workspace = true

seq-macro.workspace = true
forr.workspace = true

bigdecimal.workspace = true
iban.workspace = true

trait-variant.workspace = true  # ???

serde.workspace = true
serde_json.workspace = true
#serde_json5.workspace = true
#serde_as.workspace = true
serde_with.workspace = true
#serde_with_macros.workspace = true
#display_json.workspace = true

anyhow.workspace = true # , features = ["backtrace"] } // it means third-party "backtrace"
thiserror.workspace = true
# snafu.workspace = true
# backtrace.workspace = true   ## !!! Out dated !!!

indoc.workspace = true  # for creating multiline string

derivative.workspace = true
derive_more.workspace = true  # (Struct) Display, and so on easy impl
educe.workspace = true
strum.workspace = true  # Enum Display, and so on easy impl
strum_macros.workspace = true
#derive_more = { workspace = true, features = ["default", "from_str"] }  # (Struct) Display, and so on easy impl

# Display generating by format
#display_attr.workspace = true
#parse-display.workspace = true
#derive_more = ...
#displaythis.workspace = true

# # Seems it does not work.
# color-backtrace.workspace = true

# static (mutable) varibales support
ctor.workspace = true
once_cell.workspace = true
lazy_static.workspace = true # required for nutype
static_init.workspace = true

regex.workspace = true # required for nutype

log.workspace = true
env_logger.workspace = true
log4rs.workspace = true
tracing.workspace = true
tracing-subscriber.workspace = true
tracing-futures.workspace = true
tracing-timing.workspace = true
#tracing-log.workspace = true
#tracing-attributes.workspace = true

dotenv.workspace = true  # Loading env vars from .env file

inherent.workspace = true
readonly.workspace = true
extension-trait.workspace = true
ambassador = { workspace = true,  optional = true }  # Delegation support

fixedstr.workspace = true

num.workspace = true
nutype.workspace = true
nonzero_lit.workspace = true

implicit-clone.workspace = true

chrono.workspace = true
chrono-tz.workspace = true
time.workspace = true

type-rules.workspace = true

axum.workspace = true
# !! 'axum-server' is maintained by community independently from axum !!
axum-server = { workspace = true, features = [ "tls-rustls-no-provider" ] }
rustls = { workspace = true }
#axum-handle-error-extract.workspace = true
async-trait.workspace = true
tower.workspace = true
tower-http.workspace = true
tower-async-http.workspace = true

axum-login.workspace = true
oauth2.workspace = true
jsonwebtoken.workspace = true
# support for Argon2, PBKDF2, and scrypt password hashing algorithms
#password-auth.workspace = true
#axum-auth.workspace = true
#axum-htpasswd.workspace = true

axum-extra.workspace = true
axum-ctx.workspace = true
#axum-handler-error.workspace = true
#axum-error.workspace = true
#axum-limit = ""
#axum-request-validator.workspace = true
#axum-route = ""
#axum-template.workspace = true # ++
#axum_health = ""
axum-typed-routing.workspace = true
axum_session_auth.workspace = true
axum_static.workspace = true

axum-valid.workspace = true
validator.workspace = true
validify.workspace = true
#garde = { workspace = true, features = ["derive"] }
#axum_typed_multipart.workspace = true
#axum_static_include.workspace = true

tokio.workspace = true
futures.workspace = true
tokio-test.workspace = true

askama.workspace = true
askama_axum.workspace = true

utoipa.workspace = true
utoipa-swagger-ui.workspace = true
#axum-swagger-ui.workspace = true
#axum-openapi = ""

http.workspace = true
hyper.workspace = true
reqwest.workspace = true
url.workspace = true

sqlx.workspace = true
sqlx-postgres.workspace = true

quick_cache.workspace = true
lru.workspace = true
associative-cache.workspace = true

#inline-xml.workspace = true
## similars
#xml-macro.workspace = true
#quick-xml.workspace = true

itertools.workspace = true
by_address.workspace = true
uuid.workspace = true

yaml-rust2 = { version = "0.8.1" }

[dev-dependencies]
test-case.workspace = true
assertables.workspace = true
#mockall.workspace = true

assert-json-diff.workspace = true
#assert_json.workspace = true
#jsondiff.workspace = true

# # Seems it does not work.
# color-backtrace.workspace = true

macro_rules_attribute.workspace = true

test-with = { version = "0.13.0", features = ["default", "runtime", "executable"] }
libtest-with = { version = "0.7.0-1", features = ["net", "resource", "user", "executable"] }

rustainers.workspace = true
