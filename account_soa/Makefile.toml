
[env]
# Vars
RUST_BACKTRACE = 1

# short alias
ROOT_PROJECT_DIR = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}"
# It does not work... I do not know why.
# PROJECT_DIR = "${CARGO_MAKE_CURRENT_TASK_INITIAL_MAKEFILE_DIRECTORY}"

CARGO_VERB_P_0     = ""   # "--verbose"
CARGO_BUILD_VERB_P = ""   # "-vv" # "--verbose"
CARGO_TEST_VERB_P  = ""   # "--verbose"

CARGO_FEATURES_P1  = ""
CARGO_FEATURES_P2  = ""
#CARGO_FEATURES_P1  = "--features"
#CARGO_FEATURES_P2  = "feature1,feature2"
#CARGO_FEATURES_P1  = "--all-features"
#CARGO_FEATURES_P2  = "--no-default-features"

# profile based environment override
#  CARGO_MAKE_CARGO_PROFILE=dev
#  CARGO_MAKE_PROFILE=development
#
# profile based environment override
[env.development]
DEV = true
TARGET_SUB_DIR = "debug"
[env.production]
PROD = true
TARGET_SUB_DIR = "release"


# -----------------------------------------------------------------------------
[tasks.format]
condition_script = [" 0 "]
[tasks.format-flow]
condition_script = [" 0 "]
[tasks.format-toml]
condition_script = [" 0 "]
[tasks.format-toml-flow]
condition_script = [" 0 "]
# ------------------------------------------------------------------------------


[tasks.generate-open-api]
#env = { DEBUG_SUB_DIR = { value = "debug", condition = { env = ["CARGO_MAKE_CARGO_PROFILE", "dev"] } } }
cwd = "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}"
command = "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/${TARGET_SUB_DIR}/mvv_account_soa"
args = [ "--generate-open-api" ]


# Actually there are predefined pre-build/post-build tasks,
# BUT they are not executed by default as pre/post when you call `cargo make build`
# only when you use `cargo make build-flow`.
# Strange beahvior...
#
# [tasks.pre-build]
# command = "/bin/sh"
# args = [ "-c", "echo Task pre-build 56789" ]
# [tasks.post-build]
# command = "/bin/sh"
# args = [ "-c", "echo Task post-build 987654321" ]


[tasks.real-build]
private = true
description = "Runs the rust compiler."
category = "Build"
command = "cargo"
env = { RUST_BACKTRACE = "${RUST_BACKTRACE}" }
args = [
    "@@remove-empty(CARGO_VERB_P_0)",
    "build",
    "@@remove-empty(CARGO_BUILD_VERB_P)",
    "@@remove-empty(CARGO_FEATURES_P1)",
    "@@remove-empty(CARGO_FEATURES_P2)",
    # "@@remove-empty(CARGO_MAKE_CARGO_VERBOSE_FLAGS)",
    # "@@split(CARGO_MAKE_CARGO_BUILD_TEST_FLAGS, )",

]
dependencies = [
    "pre-build",
]


[tasks.build]
command = "echo" # overriding/disabling predefined build command
args = [ "build flow" ]
dependencies = [
    "pre-build",
    "real-build",
    "generate-open-api",
    "post-build",
]


[tasks.test]
category = "Test"
# toolchain = "${CARGO_MAKE_RUST_DEFAULT_TOOLCHAIN}"
env = { RUST_BACKTRACE = "${RUST_BACKTRACE}" }
command = "cargo"
args = [
    "@@remove-empty(CARGO_VERB_P_0)",
    "test",
    "@@remove-empty(CARGO_TEST_VERB_P)",
    "@@remove-empty(CARGO_FEATURES_P1)",
    "@@remove-empty(CARGO_FEATURES_P2)",
    # "@@remove-empty(CARGO_MAKE_CARGO_VERBOSE_FLAGS)",
    # "@@split(CARGO_MAKE_CARGO_BUILD_TEST_FLAGS, )",
]
dependencies = [
    "build",
]


# -----------------------------------------------------------------------------
[tasks.generate-ssl-certs-prepare]
private = true
workspace = false
env = { "TEST_CERTS_DIR" = "${ROOT_PROJECT_DIR}/target/debug/generated-test-resources" }
command = "mkdir"
args = ["-p", "${TEST_CERTS_DIR}"]


[tasks.delete-ssl-certs-prepare]
private = true
workspace = false
command = "/bin/sh"
cwd = "${TEST_CERTS_DIR}"
args = [
    "-c",
    # " rm -f ${TEST_CERTS_DIR}/*.key ${TEST_CERTS_DIR}/*.crt ${TEST_CERTS_DIR}/*.cert ",
    " rm -f *.key *.crt *.cert ",
]
dependencies = ["generate-ssl-certs-prepare"]

### Doe NOT work
#[tasks.delete-ssl-certs-prepare]
#workspace = false
#command = "rm"
#cwd = "${TEST_CERTS_DIR}"
#args = [
#    "-f", "*.key", "*.crt", "*.cert ",
#]
#dependencies = ["generate-ssl-certs-prepare"]


[tasks.generate-ssl-certs]
workspace = false
dependencies = [
    "generate-ssl-certs-prepare",
    "generate-ssl-certs--for-account-soa",
    "generate-ssl-certs--for-database",
]


[tasks.regenerate-ssl-certs]
workspace = false
dependencies = [
    "generate-ssl-certs-prepare",
    "delete-ssl-certs-prepare",
    "generate-ssl-certs--for-account-soa",
    "generate-ssl-certs--for-database",
]


[tasks.generate-ssl-certs--for-account-soa]
private = true
workspace = false
condition = { files_not_exist = ["${TEST_CERTS_DIR}/rust-account-soa.key", "${TEST_CERTS_DIR}/rust-account-soa.crt"] }
command = "openssl"
args = [
    "req", "-x509", "-newkey", "rsa:4096", "-sha256", "-days", "30",
    "-nodes",
    "-keyout", "${TEST_CERTS_DIR}/rust-account-soa.key",
    "-out", "${TEST_CERTS_DIR}/rust-account-soa.crt", "-subj", "/CN=rust-account-soa",
    "-addext", "subjectAltName=DNS:rust-account-soa-0,DNS:rust-account-soa_0,DNS:rust-account-soa-1,DNS:rust-account-soa_1,DNS:rust-account-soa-2,DNS:rust-account-soa_2",
    # "-addext", "subjectAltName=DNS:rust-account-soa-0,DNS:*.example.com,IP:10.0.0.1",

    # account-soa_0
    # account-soa-0 bank-plugin-account-soa_0
    # bank-plugin-account-soa-0 bank-plugin-tests-1661111370-account-soa_0 bank-plugin-tests-1661111370-account-soa-0
    # account-soa_1
    # account-soa-1 bank-plugin-account-soa_1
    # bank-plugin-account-soa-1 bank-plugin-tests-1661111370-account-soa_1 bank-plugin-tests-1661111370-account-soa-1
    # account-soa_2
    # account-soa-2 bank-plugin-account-soa_2
    # bank-plugin-account-soa-2 bank-plugin-tests-1661111370-account-soa_2 bank-plugin-tests-1661111370-account-soa-2

    #
    # mvv-bank localhost
    # mvv-bank_0 mvv-bank-0 bank-plugin-mvv-bank_0 bank-plugin-mvv-bank-0 bank-plugin-tests-1661111370-mvv-bank_0 bank-plugin-tests-1661111370-mvv-bank-0
    # mvv-bank_1 mvv-bank-1 bank-plugin-mvv-bank_1 bank-plugin-mvv-bank-1 bank-plugin-tests-1661111370-mvv-bank_1 bank-plugin-tests-1661111370-mvv-bank-1
    # mvv-bank_2 mvv-bank-2 bank-plugin-mvv-bank_2 bank-plugin-mvv-bank-2 bank-plugin-tests-1661111370-mvv-bank_2 bank-plugin-tests-1661111370-mvv-bank-2
]
# <hosts>${generated-dev-certs-hosts}</hosts>
# <generated-dev-certs-hosts>localhost,database,${project.build.finalName}</generated-dev-certs-hosts>
dependencies = ["generate-ssl-certs-prepare"]


[tasks.generate-ssl-certs--for-database]
private = true
workspace = false
condition = { files_not_exist = ["${TEST_CERTS_DIR}/database.key", "${TEST_CERTS_DIR}/database.crt"] }
command = "openssl"
args = [
    "req", "-x509", "-newkey", "rsa:4096", "-sha256", "-days", "30",
    "-nodes",
    "-keyout", "${TEST_CERTS_DIR}/database.key",
    "-out", "${TEST_CERTS_DIR}/database.crt", "-subj", "/CN=database",
    "-addext", "subjectAltName=DNS:database-0,DNS:database_0,DNS:database-1,DNS:database_1",
]
dependencies = ["generate-ssl-certs-prepare"]
# -----------------------------------------------------------------------------



# -----------------------------------------------------------------------------
[tasks.init_docker_vars]
env = { PROJECT_DIR = "${CARGO_MAKE_CURRENT_TASK_INITIAL_MAKEFILE_DIRECTORY}" } # short alias


# TODO: How to reuse it?
[tasks.private_docker_build_prepare_labels]
env = { DOCKER_IMAGE_LABELS = [
    "--label", "PROJECT_NAME=${CARGO_MAKE_PROJECT_NAME}",
    "--label", "PACKAGE_NAME=${CARGO_MAKE_PROJECT_NAME}",
    "--label", "PROJECT_VERSION=${CARGO_MAKE_CRATE_VERSION}",
    "--label", "PACKAGE_VERSION=${CARGO_MAKE_CRATE_VERSION}",
    # Hm... CARGO_MAKE_PROJECT_VERSION is not set?!
    #"--label", "PROJECT_VERSION=${CARGO_MAKE_PROJECT_VERSION}",
    #"--label", "PACKAGE_VERSION=${CARGO_MAKE_PROJECT_VERSION}",
    "--label", "GIT_BRANCH=${CARGO_MAKE_GIT_BRANCH}",
    "--label", "GIT_USER_NAME=${CARGO_MAKE_GIT_USER_NAME}",
    "--label", "GIT_HEAD_LAST_COMMIT_HASH=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH}",
    "--label", "GIT_HEAD_LAST_COMMIT_HASH_PREFIX=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH_PREFIX}",
] }



[tasks.build-docker-prod]
condition = { profiles = [ "prod", "production", "release" ] }
cwd = "${ROOT_PROJECT_DIR}"
command = "docker"
args = [
    "build",
    "--file", "${PROJECT_DIR}/docker/Dockerfile",
    "--tag", "rust-mvv-webapp",
    # ?? How to reuse it?
    #    ${DOCKER_IMAGE_LABELS},
    "--label", "PROJECT_NAME=${CARGO_MAKE_PROJECT_NAME}",
    "--label", "PACKAGE_NAME=${CARGO_MAKE_PROJECT_NAME}",
    "--label", "PROJECT_VERSION=${CARGO_MAKE_CRATE_VERSION}",
    "--label", "PACKAGE_VERSION=${CARGO_MAKE_CRATE_VERSION}",
    # Hm... CARGO_MAKE_PROJECT_VERSION is not set?!
    #"--label", "PROJECT_VERSION=${CARGO_MAKE_PROJECT_VERSION}",
    #"--label", "PACKAGE_VERSION=${CARGO_MAKE_PROJECT_VERSION}",
    "--label", "GIT_BRANCH=${CARGO_MAKE_GIT_BRANCH}",
    "--label", "GIT_USER_NAME=${CARGO_MAKE_GIT_USER_NAME}",
    "--label", "GIT_HEAD_LAST_COMMIT_HASH=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH}",
    "--label", "GIT_HEAD_LAST_COMMIT_HASH_PREFIX=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH_PREFIX}",
    ".",]
workspace = false
dependencies = [
    "build",
    "test",
    "init_docker_vars",
    "private_docker_build_prepare_labels",
]


[tasks.build-docker]
workspace = false
dependencies = [
    "build-docker-prod",  # will be called only in prod/release profile
    # "build-debug-docker", # for DEV profile
    "build-debug-local-docker", # for DEV profile
]


[tasks.build-docker-debug]
cwd = "${ROOT_PROJECT_DIR}"
command = "docker"
args = ["build",
    "--file", "${PROJECT_DIR}/docker/Dockerfile",
    "--tag", "rust-mvv-webapp-debug",
    "--build-arg", "RELEASE_OR_DEBUG_BUILD_PARAM=",
    "--build-arg", "RELEASE_OR_DEBUG_TARGET_DIR=./target/debug",
    # ?? How to reuse it?
    #${DOCKER_IMAGE_LABELS},
    "--label", "PROJECT_NAME=${CARGO_MAKE_PROJECT_NAME}",
    "--label", "PACKAGE_NAME=${CARGO_MAKE_PROJECT_NAME}",
    "--label", "PROJECT_VERSION=${CARGO_MAKE_CRATE_VERSION}",
    "--label", "PACKAGE_VERSION=${CARGO_MAKE_CRATE_VERSION}",
    # Hm... CARGO_MAKE_PROJECT_VERSION is not set?!
    #"--label", "PROJECT_VERSION=${CARGO_MAKE_PROJECT_VERSION}",
    #"--label", "PACKAGE_VERSION=${CARGO_MAKE_PROJECT_VERSION}",
    "--label", "GIT_BRANCH=${CARGO_MAKE_GIT_BRANCH}",
    "--label", "GIT_USER_NAME=${CARGO_MAKE_GIT_USER_NAME}",
    "--label", "GIT_HEAD_LAST_COMMIT_HASH=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH}",
    "--label", "GIT_HEAD_LAST_COMMIT_HASH_PREFIX=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH_PREFIX}",
    ".",]
workspace = false
dependencies = [
    "build",
    "test",
    "init_docker_vars",
    "private_docker_build_prepare_labels",
]


[tasks.get-ubuntu-info-vars]
workspace = false
# get Ubuntu bersion => cat /etc/os-release | grep VERSION_ID | sed -e "s/^VERSION_ID=\"//" -e "s/\"//"
env = { UBUNTU_VERSION = { script = ["cat /etc/os-release | grep VERSION_ID | sed -e \"s/^VERSION_ID=\\\"//\"  -e \"s/\\\"//\""] } }
script = "echo UBUNTU_VERSION: ${UBUNTU_VERSION}"

# CARGO_MAKE_CRATE_TARGET_DIRECTORY
# ${CARGO_TARGET_DIR}
# CARGO_MAKE_CRATE_CURRENT_WORKSPACE_MEMBER
# CARGO_MAKE_WORKSPACE_PACKAGE_NAME
#
#
[tasks.build-docker-debug-local]
condition = { profiles = [ "dev", "development", "debug" ] }
command = "docker"
cwd = "${ROOT_PROJECT_DIR}"
args = [
    "build",
    "--file", "${PROJECT_DIR}/docker/Dockerfile-local",
    "--tag", "rust-mvv-webapp-debug",
    "--build-arg", "UBUNTU_VERSION=${UBUNTU_VERSION}",
    # ?? How to reuse it?
    #${DOCKER_IMAGE_LABELS},
    "--label", "PROJECT_NAME=${CARGO_MAKE_PROJECT_NAME}",
    "--label", "PACKAGE_NAME=${CARGO_MAKE_PROJECT_NAME}",
    "--label", "PROJECT_VERSION=${CARGO_MAKE_CRATE_VERSION}",
    "--label", "PACKAGE_VERSION=${CARGO_MAKE_CRATE_VERSION}",
    # Hm... CARGO_MAKE_PROJECT_VERSION is not set?!
    #"--label", "PROJECT_VERSION=${CARGO_MAKE_PROJECT_VERSION}",
    #"--label", "PACKAGE_VERSION=${CARGO_MAKE_PROJECT_VERSION}",
    "--label", "GIT_BRANCH=${CARGO_MAKE_GIT_BRANCH}",
    "--label", "GIT_USER_NAME=${CARGO_MAKE_GIT_USER_NAME}",
    "--label", "GIT_HEAD_LAST_COMMIT_HASH=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH}",
    "--label", "GIT_HEAD_LAST_COMMIT_HASH_PREFIX=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH_PREFIX}",
    ".",]
workspace = false
dependencies = [
    "get-ubuntu-info-vars",
    "init_docker_vars",
    "build",
    # "test",
    "private_docker_build_prepare_labels",
]


# -----------------------------------------------------------------------------
[tasks.docker-compose-up]
command = "docker-compose"
args = [
    "--file", "${PROJECT_DIR}/docker/docker-compose.yml",      # ${docker-compose-file}",
    "--env-file", "${PROJECT_DIR}/docker/docker-compose.env",  # "${docker-env-file}",
    "--project-directory", "${PROJECT_DIR}",
    "--project-name", "rust-account-soa-project",                # "${project.artifactId}",
    "up",
    # "rust-account-soa", # "${docker-compose-service-up}",
    ]
workspace = false
dependencies = [
    "init_docker_vars",
    # "build",
    # "test",
    # "private_docker_build_prepare_labels",
]



[tasks.docker-compose-down]
command = "docker-compose"
args = [
    "--file", "${PROJECT_DIR}/docker/docker-compose.yml",      # ${docker-compose-file}",
    "--env-file", "${PROJECT_DIR}/docker/docker-compose.env",  # "${docker-env-file}",
    "--project-directory", "${PROJECT_DIR}",
    "--project-name", "rust-account-soa-project",                # "${project.artifactId}",
    "down",
    #"rust-account-soa", # "${docker-compose-service-up}",
    ]
workspace = false
dependencies = [
    "init_docker_vars",
#    "build",
#    "test",
#    "private_docker_build_prepare_labels",
]



[tasks.docker-compose-rerun]
workspace = false
dependencies = [
    # "build",
    # "test",
    # "build-debug-docker",
    "docker-compose-down",
    "docker-compose-up",
]



[tasks.docker-debug-rebuild-rerun-all]
workspace = false
dependencies = [
    "build",
    # "test",
    "build-debug-docker",
    "docker-compose-down",
    "docker-compose-up",
]


[tasks.docker-compose-down-up]
workspace = false
dependencies = [
    "docker-compose-down",
    "docker-compose-up",
]
# -----------------------------------------------------------------------------


[tasks.integration-tests]
command = "cargo"
# Using 'cfg' causes FULL recompilation of ALL dependencies (and proejct files)
# when we switch on/off it :-(
#env = { RUSTFLAGS="--cfg integration_tests", CARGO_BUILD_RUSTFLAGS="--cfg integration_tests", RUST_TEST_THREADS = 1 }
env = { INTEGRATION_TESTS = "true", RUST_TEST_THREADS = "1", RUST_BACKTRACE = "${RUST_BACKTRACE}" }
args = [
    "@@remove-empty(CARGO_VERB_P_0)",
    "test",
    "@@remove-empty(CARGO_TEST_VERB_P)",
    "@@remove-empty(CARGO_FEATURES_P1)",
    "@@remove-empty(CARGO_FEATURES_P2)",
    # "--features", "integration_tests",
    #
#    "--config",  "test_mode=integration_tests",
#    "--config",  "rustc-cfg='integration_tests'",
#    "--config",  "rustc-cfg='test_mode=integration_tests'",
#    "--config",  "cfg='test_mode=integration_tests'",
#    "--config",  "rustflags=--cfg 'test_mode=integration_tests'",
    ##### 'build.rustdocflags = ["--html-in-header", "header.html"]'
#    "--config",  "'rustflags=[--cfg test_mode=integration_tests]",
#    "--config",  "'rustflags=[test_mode=integration_tests]",
#    "--config",  "rustc-cfg='test_mode=integration_tests'",
    "--test", "integration_*",
    "--jobs", "1", # no parallel
    "--",
    "--nocapture",

    # --workspace,
    # --exclude <SPEC>
    # --lib,   # Test only this package's library
    # --bins,  # Test all binaries
    # --bin [<NAME>]
    # --tests             Test all test targets
    # --test [<NAME>]     Test only the specified test target
    # --all-targets       Test all targets (does not include doctests)
    # -F, --features <FEATURES>  Space or comma separated list of features to activate
    # --all-features         Activate all available features
    # --no-default-features  Do not activate the `default` feature
    # -j, --jobs <N>                Number of parallel jobs, defaults to # of CPUs.
    # -r, --release                 Build artifacts in release mode, with optimizations
    # --profile <PROFILE-NAME>  Build artifacts with the specified profile
    # --target [<TRIPLE>]       Build for the target triple
    # --target-dir <DIRECTORY>  Directory for all generated artifacts
    # --unit-graph              Output build graph in JSON (unstable)
    # --timings[=<FMTS>]        Timing output formats (unstable) (comma separated): html, json
]
dependencies = [
    "build",
    # "build-docker",
]

# Aliase for calling from root/workspace makefile (I do not know why it does not work without it)
[tasks.integration-tests-member]
alias = "integration-tests"


########################################################################################################################
#                                         Optional aliases                                                             #
########################################################################################################################

[tasks.build-debug-local-docker]
alias = "build-docker-debug-local"

[tasks.build-local-debug-docker]
alias = "build-docker-debug-local"

[tasks.integration-test]
alias = "integration-tests"

[tasks.build-debug-docker]
workspace = false
alias = "build-docker-debug"

[tasks.build-prod-docker]
workspace = false
alias = "build-docker-prod"
