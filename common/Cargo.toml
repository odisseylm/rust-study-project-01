[package]
name = "mvv_common"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html


#[profile.release]
#strip = "symbols"  # possible: "none", "debuginfo", "symbols" (default "none")

#[[bin]]
#name = "health_checker"
#path = "../healthcheck/src/bin/health_checker"
#profile = "release"
#fdfd = "fdfd"


[features]
# Defines a feature named `webp` that does not enable any other features.
#webp = []
#error_generic_member_access = []
#special-integration-test = []

serde_json_raw_value = ["serde_json/raw_value"]
#default = ["serde_json_raw_value", ]

tonic = [ "dep:tonic" ]

ambassador = [ "dep:ambassador" ]
default = [ "ambassador", "serde_json_raw_value" ]

#sqlx_07 = [ "dep:sqlx-07", "dep:sqlx-postgres-07", "dep:sqlx-sqlite-07", "dep:libsqlite3-sys-07" ]
#sqlx_08 = [ "dep:sqlx-08", "dep:sqlx-postgres-08", "dep:sqlx-sqlite-08", "dep:libsqlite3-sys-08" ]

#['cfg(feature = "a")'.lib]
#crate-type = ["staticlib"]
#
#['cfg(feature = "b")'.lib]
#crate-type = ["rlib"]



[build-dependencies]
cargo_metadata.workspace = true
version_check.workspace = true
rustc_version.workspace = true


[dependencies]
mvv_error_macro = { version = "0.1.0", path = "../error_macro" }
mvv_tuple_heter_iter_macro = { version = "0.1.0", path = "../tuple_heter_iter_macro" }
mvv_tuple_heter_iter = { version = "0.1.0", path = "../tuple_heter_iter" }

# -------------------------------------------------------------------------
rustc_version.workspace = true

if_chain.workspace = true

static_assertions.workspace = true # 4 years gao
static_assertions_next.workspace = true # probably successor of 'static_assertions' ??

const_format.workspace = true
const-str.workspace = true
place_macro.workspace = true

seq-macro.workspace = true
forr.workspace = true

bigdecimal.workspace = true

# Can be optional
uuid.workspace = true
iban.workspace = true

serde = { workspace = true, features = ["derive", "std", "rc", "serde_derive" ] }
serde_json = { workspace = true, features = [ "default", ] }
serde_with.workspace = true
#serde_json5.workspace = true
#serde_as.workspace = true
#serde_with_macros.workspace = true
#display_json.workspace = true

anyhow.workspace = true #, features = ["backtrace"] } // it means third-party "backtrace"
thiserror.workspace = true
#snafu.workspace = true

indoc.workspace = true  # for creating multiline string

derivative.workspace = true
derive_more.workspace = true  # (Struct) Display, and so on easy impl
educe.workspace = true
strum.workspace = true    # Enum Display, and so on easy impl
strum_macros.workspace = true

# # Seems it does not work.
# color-backtrace.workspace = true

# static (mutable) varibales support
ctor.workspace = true
once_cell.workspace = true
lazy_static.workspace = true # required for nutype
static_init.workspace = true
ptr_cell.workspace = true

regex.workspace = true # required for nutype

log.workspace = true
env_logger.workspace = true
log4rs.workspace = true
#tracing.workspace = true
tracing = { workspace = true, features = ["attributes", "log", ] }
tracing-subscriber.workspace = true
tracing-futures.workspace = true
tracing-timing.workspace = true

dotenv.workspace = true  # Loading env vars from .env file

inherent.workspace = true
readonly.workspace = true
extension-trait.workspace = true
ambassador = { workspace = true, optional = true }  # Delegation support

fixedstr.workspace = true

num.workspace = true
nutype = { workspace = true, features = ["default", "regex", "serde", ] }
nonzero_lit.workspace = true

implicit-clone = { workspace = true, features = ["default", "derive", "implicit-clone-derive"] }

chrono = { workspace = true, features = ["default", "serde"] }
chrono-tz.workspace = true
time.workspace = true

type-rules.workspace = true

async-trait.workspace = true
trait-variant.workspace = true # similaer to 'async-trait'

axum = { workspace = true, features = ["default", "macros"] }
axum-server = { workspace = true, features = [ "tls-rustls-no-provider" ] }
#axum-handle-error-extract.workspace = true
tower = { workspace = true, features = ["full"] }
tower-http.workspace = true
tower-async-http.workspace = true

axum-login.workspace = true
oauth2.workspace = true
# support for Argon2, PBKDF2, and scrypt password hashing algorithms
password-auth.workspace = true

#axum-auth.workspace = true
axum-extra = { workspace = true, features = ["typed-header"] }
axum-ctx.workspace = true
axum-typed-routing.workspace = true
axum_session_auth.workspace = true
axum_static.workspace = true
axum-valid = { workspace = true, features = ["default", "validify", "validator", "basic"] }
validator = { workspace = true, features = ["derive", "validator_derive"] }
#garde = { workspace = true, features = ["derive"] }
validify.workspace = true
jsonwebtoken.workspace = true

tokio = { workspace = true, features = ["full"] }
tokio-test.workspace = true

askama = { workspace = true, features = ["with-axum"] }
askama_axum.workspace = true

utoipa = { workspace = true, features = [
    "default", "axum_extras",
    "decimal", "uuid", "url", "chrono",
    "debug",
    # "openapi_extensions", "yaml",
    # "preserve_order", "preserve_path_order",
] }
indexmap.workspace = true

http.workspace = true
hyper.workspace = true
reqwest = { workspace = true, features = ["json"] }
url.workspace = true

sqlx = { workspace = true, features = ["runtime-tokio", "sqlite", "postgres", "sqlx-postgres", "chrono", "time", "bigdecimal"] }
# Hm... Why I had to duplicate all options?
sqlx-postgres = { workspace = true, features = ["bigdecimal", "chrono", "uuid"] }


#sqlx-07 = { package = "sqlx", version = "0.7.4", features = ["runtime-tokio", "sqlite", "postgres", "sqlx-postgres", "chrono", "time", "bigdecimal"], optional = true }
## Hm... Why I had to duplicate all options?
#sqlx-postgres-07 = { package = "sqlx", version = "0.7.4", features = ["bigdecimal", "chrono", "uuid"], optional = true }
#sqlx-sqlite-07 = { package = "sqlx-sqlite", version = "0.7.4", features = ["chrono", "uuid", "serde", ], optional = true }
#libsqlite3-sys-07 = { package = "libsqlite3-sys", version = "0.27.0", features = ["buildtime_bindgen"], optional = true }
#
#sqlx-08 = { package = "sqlx", version = "0.8.2", features = ["runtime-tokio", "sqlite", "postgres", "sqlx-postgres", "chrono", "time", "bigdecimal"], optional = true }
#sqlx-postgres-08 = { package = "sqlx", version = "0.8.2", features = ["bigdecimal", "chrono", "uuid"], optional = true }
#sqlx-sqlite-08 = { package = "sqlx-sqlite", version = "0.8.2", features = ["chrono", "uuid", "serde", ], optional = true }
#libsqlite3-sys-08 = { package = "libsqlite3-sys", version = "0.30.1", features = ["buildtime_bindgen"], optional = true }
#
##sqlx-sqlite = { version = "0.7.4", features = ["chrono", "uuid", "serde", ]}
##sqlx-sqlite = { version = "0.8.2", features = ["chrono", "uuid", "serde"]}
##libsqlite3-sys = { version = "0.30.1", features = ["default"]}
##sqlx-sqlite
##libsqlite3-sys = { version = "0.27.0", features = [], optional = true }


quick_cache.workspace = true
#lru-cache.workspace = true
#xlru-cache.workspace = true
#lru_time_cache.workspace = true
lru.workspace = true
#clru.workspace = true
#fast-lru.workspace = true
#const-lru.workspace = true
#lru-mem.workspace = true
#lfu_cache.workspace = true
#lfu.workspace = true
#async_cache.workspace = true
#faststr.workspace = true
associative-cache.workspace = true

#inline-xml.workspace = true
## similars
#xml-macro.workspace = true
#quick-xml.workspace = true

itertools.workspace = true
by_address.workspace = true

#tuple_len.workspace = true
#tuple_length.workspace = true

progenitor = { workspace = true, features = [] }
progenitor-client = { workspace = true, features = [] }

#tonic = { workspace = true, features = ["default", "transport", "tls", "channel", "codegen"], optional = true }
tonic = { workspace = true, features = ["default", "transport", "tls"], optional = true }

fs_extra.workspace = true
rust-embed.workspace = true

yaml-rust2.workspace = true
rustainers.workspace = true

[dev-dependencies]
#mockall.workspace = true
test-case.workspace = true
assertables.workspace = true

#assert_json.workspace = true
assert-json-diff.workspace = true
#jsondiff.workspace = true

#assert-str.workspace = true
#assert-text.workspace = true
#assert_eq_all.workspace = true
#assert_fn.workspace = true
#assert_json.workspace = true // requires 'thiserror v1.0.60 (*)'
#assert-call.workspace = true
#assert_no_alloc.workspace = true
#assert_approx_eq.workspace = true
#assert_that.workspace = true
#assert_panic_free.workspace = true
#assert_matches.workspace = true

# # Seems it does not work.
# color-backtrace.workspace = true

macro_rules_attribute.workspace = true
