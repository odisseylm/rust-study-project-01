use std::str::FromStr;
use bigdecimal::BigDecimal;
use crate::entities::amount::Amount;
use crate::entities::currency::Currency;
use crate::util::BacktraceInfo;


#[allow(dead_code)] // it is used by private test
fn parse_amount_01(s: &str) -> Result<Amount, parse_amount_old::ParseAmountError> {
    use parse_amount_old::{ ParseAmountError, ErrorKind };

    let s = s.trim();

    let last_space_bytes_offset = s.rfind(|ch: char|{ ch.is_ascii_whitespace() })
        .ok_or_else(|| ParseAmountError::new(ErrorKind::NoCurrency)) ?;

    let (str_amount, str_cur) = s.split_at(last_space_bytes_offset);

    let currency = Currency::from_str(str_cur.trim_start()) ?;
    let amount = BigDecimal::from_str(str_amount.trim_end()) ?;

    Ok(Amount::new(amount, currency))

    /*
    let s = s.trim();
    let last_space_bytes_offset_opt: Option<usize> = s.rfind(|ch: char|{ ch.is_ascii_whitespace() });

    match last_space_bytes_offset_opt {
        None => { Err(ParseAmountError::NoCurrencyError) }
        Some(last_space_bytes_offset) => {
            let (str_amount, str_cur) = s.split_at(last_space_bytes_offset);
            let currency_res = Currency::from_str(str_cur.trim_start());

            match currency_res {
                Err(cur_parse_err) => { Err(ParseAmountError::ParseCurrencyError(cur_parse_err)) }
                Ok(currency) => {
                    let amount_res = BigDecimal::from_str(str_amount.trim_end());

                    match amount_res {
                        Err(amount_parse_err) => { Err(ParseAmountError::ParseAmountError(amount_parse_err)) }
                        Ok(amount) => { Ok(Amount::new(amount, currency)) }
                    }
                }
            }
        }
    }
    */
}


#[allow(dead_code)] // it is used by private test
fn parse_amount_02(s: &str) -> Result<Amount, parse_amount_old::ParseAmountError> {
    use parse_amount_old::ErrorSource::*;
    use parse_amount_old::{ ParseAmountError, ErrorKind };

    let s = s.trim();

    let last_space_bytes_offset = s.rfind(|ch: char|{ ch.is_ascii_whitespace() })
        .ok_or_else(|| ParseAmountError::new(ErrorKind::NoCurrency)) ?;

    let (str_amount, str_cur) = s.split_at(last_space_bytes_offset);

    let currency = Currency::from_str(str_cur.trim_start())
        .map_err(|er| ParseAmountError::with_source(ErrorKind::IncorrectCurrency, CurrencyFormatError(er))) ?;

    let amount = BigDecimal::from_str(str_amount.trim_end())
        .map_err(|er| ParseAmountError { kind: ErrorKind::IncorrectAmount,
            source: ParseBigDecimalError(er), backtrace: BacktraceInfo::new() }) ?;

    Ok(Amount::new(amount, currency))
}


#[allow(dead_code)] // it is used by private test
fn parse_amount_03(s: &str) -> Result<Amount, parse_amount_old::ParseAmountError> {
    use parse_amount_old::{ ParseAmountError, ErrorKind };

    let s = s.trim();

    let last_space_bytes_offset = s.rfind(|ch: char|{ ch.is_ascii_whitespace() })
        .ok_or_else(|| ParseAmountError::new(ErrorKind::NoCurrency)) ?;

    let (str_amount, str_cur) = s.split_at(last_space_bytes_offset);

    let currency = Currency::from_str(str_cur.trim_start())
        .map_err(|er| ParseAmountError::with_from(ErrorKind::IncorrectCurrency, er)) ?;

    let amount = BigDecimal::from_str(str_amount.trim_end())
        .map_err(|er| ParseAmountError::with_from(ErrorKind::IncorrectAmount, er)) ?;

    Ok(Amount::new(amount, currency))
}


// -------------------------------------------------------------------------------------------------
//                                        Error
// -------------------------------------------------------------------------------------------------


// rust does not support nested structs/types/so on.
// As workaround, I decided to use sub-namespace.
//
pub mod parse_amount_old {
    use bigdecimal::ParseBigDecimalError;
    use crate::util::BacktraceInfo;
    use crate::entities::currency::parse_currency::CurrencyFormatError;

    #[derive(Debug, thiserror::Error)]
    #[derive(Copy, Clone)]
    pub enum ErrorKind {
        #[error("No currency in amount")]
        NoCurrency,
        #[error("Incorrect currency format")]
        IncorrectCurrency,
        #[error("Incorrect amount format")]
        IncorrectAmount,
    }

    #[derive(thiserror::Error)]
    #[derive(static_error_macro::MyStaticStructError)]
    pub struct ParseAmountError {
        pub kind: ErrorKind,
        #[source]
        // #[from]
        pub source: ErrorSource,
        pub backtrace: BacktraceInfo,
    }

    // It can be generated by macro
    #[derive(thiserror::Error)]
    #[derive(static_error_macro::MyStaticStructErrorSource)]
    // Full type or short type can be used: ParseAmountError/crate::entities::amount::parse_amount::ParseAmountError
    #[struct_error_type(ParseAmountError)]
    pub enum ErrorSource {
        #[error("No source")]
        NoSource,
        #[error("Currency format error")]
        // #[static_error_macro::StaticStructErrorType(ParseAmountError)]
        #[from_error_kind(IncorrectCurrency)]
        CurrencyFormatError(CurrencyFormatError),
        // for testing
        // CurrencyFormatError22(crate::entities::currency::parse_currency::CurrencyFormatError),
        #[error("Decimal format error")]
        #[from_error_kind(IncorrectAmount)]
        #[no_source_backtrace]
        ParseBigDecimalError(ParseBigDecimalError),
    }

    /*
    impl ParseAmountError {

        // error[E0658]: inherent associated types are unstable
        // see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information
        //
        // type ErrorKind = ParseAmountErrorKind;

        // It can be generated by macro
        pub fn new(kind: ErrorKind) -> ParseAmountError {
            ParseAmountError { kind, source: ErrorSource::NoSource, backtrace: BacktraceInfo::new() }
        }
        // It can be generated by macro
        pub fn with_backtrace(kind: ErrorKind, backtrace_policy: NewBacktracePolicy) -> ParseAmountError {
            ParseAmountError { kind, source: ErrorSource::NoSource, backtrace: BacktraceInfo::new_by_policy(backtrace_policy) }
        }
        // It can be generated by macro
        pub fn with_source(kind: ErrorKind, source: ErrorSource) -> ParseAmountError {
            ParseAmountError { kind, backtrace: BacktraceInfo::inherit_from(&source), source }
        }
        // It can be generated by macro
        pub fn with_from<ES: Into<ErrorSource>>(kind: ErrorKind, source: ES) -> ParseAmountError {
            let src = source.into();
            ParseAmountError { kind, backtrace: BacktraceInfo::inherit_from(&src), source: src }
        }
    }

    // It can be generated by macro
    impl From<CurrencyFormatError> for ParseAmountError {
        fn from(error: CurrencyFormatError) -> Self { ParseAmountError::with_from(ErrorKind::IncorrectCurrency, error) }
    }
    // It can be generated by macro
    impl From<ParseBigDecimalError> for ParseAmountError {
        fn from(error: ParseBigDecimalError) -> Self { ParseAmountError::with_from(ErrorKind::IncorrectAmount, error) }
    }

    // It can be generated by macro
    impl Into<ErrorSource> for CurrencyFormatError {
        fn into(self) -> ErrorSource { ErrorSource::CurrencyFormatError22(self) }
    }
    // It can be generated by macro
    impl Into<ErrorSource> for ParseBigDecimalError {
        fn into(self) -> ErrorSource { ErrorSource::ParseBigDecimalError(self) }
    }

    // It can be generated by macro
    impl BacktraceCopyProvider for ErrorSource {
        fn provide_backtrace(&self) -> BacktraceInfo {
            match self {
                ErrorSource::NoSource => { BacktraceInfo::empty() }
                ErrorSource::ParseBigDecimalError(_)  => { BacktraceInfo::empty() }
                ErrorSource::CurrencyFormatError22(src) => { src.provide_backtrace() }
            }
        }
    }

    // It can be generated by macro
    impl core::fmt::Debug for ErrorSource {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> std::fmt::Result {
            use ErrorSource::*;
            match self {
                NoSource                      => { write!(f, "No source") }
                CurrencyFormatError22(ref src)  => { write!(f, "{:?}", src) }
                ParseBigDecimalError(ref src) => { write!(f, "{:?}", src) }
            }
        }
    }

    // It can be generated by macro
    impl core::fmt::Display for ParseAmountError {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{}", self.kind)
        }
    }

    impl core::fmt::Debug for ParseAmountError {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            if self.backtrace.is_captured() {
                let src_contains_captured_backtrace: bool = crate::util::backtrace::BacktraceCopyProvider::contains_self_or_child_captured_backtrace(&self.source);
                if src_contains_captured_backtrace {
                    write!(f, "ParseAmountError {{ kind: {:?}, source: {:?} }}", self.kind, self.source)
                } else {
                    write!(f, "ParseAmountError {{ kind: {:?}, source: {:?}, backtrace: {} }}", self.kind, self.source, self.backtrace)
                }
            } else {
                write!(f, "ParseAmountError {{ kind: {:?}, source: {:?} }}", self.kind, self.source)
            }
        }
    }

    // impl BacktraceCopyProvider for ParseBigDecimalError {
    //     fn provide_backtrace(&self) -> BacktraceInfo { BacktraceInfo::empty() }
    // }
    */
}


#[cfg(test)]
mod tests {
    use crate::util::TestResultUnwrap;
    use super::*;

    #[test]
    #[should_panic(expected = "ParseAmountError { kind: IncorrectAmount, source: ParseBigInt(ParseBigIntError { kind: InvalidDigit })")]
    fn test_parse_amount_01_01() {
        parse_amount_01(" \t \n 12_John_2.350 BRL ").test_unwrap();
    }

    #[test]
    #[should_panic(expected = "ParseAmountError { kind: IncorrectAmount, source: ParseBigInt(ParseBigIntError { kind: InvalidDigit })")]
    fn test_parse_amount_02_01() {
        parse_amount_02(" \t \n 12_John_2.350 BRL ").test_unwrap();
    }

    #[test]
    #[should_panic(expected = "ParseAmountError { kind: IncorrectAmount, source: ParseBigInt(ParseBigIntError { kind: InvalidDigit })")]
    fn test_parse_amount_03_01() {
        parse_amount_03(" \t \n 12_John_2.350 BRL ").test_unwrap();
    }
}
