# Scan this file for changes every 30 seconds
refresh_rate: 30 seconds

appenders:
  # An appender named "stdout" that writes to stdout
  stdout:
    kind: console
    #tty_only: true
    encoder:
      #pattern: "{d} {l:5} - {m}{n}"
      # with colored Level
      pattern: "{d} {h({l:5})} - {m}{n}"
      # the whole line is colored
      #pattern: "{h({d(%+)(utc)} [{f}:{L}] {l:<6} {M}:{m})}{n}"

  # An appender named "requests" that writes to a file with a custom pattern encoder
  requests:
    #kind: file
    #path: "./.log/requests.log"
    #encoder:
    #  pattern: "{d} {l:5} - {m}{n}"

    kind: rolling_file
    path: "./.log/requests.log"
    encoder:
      pattern: "{d} {l:5} - {m}{n}"
    policy:
      kind: compound
      trigger:
        kind: size
        limit: 1mb
      roller:
        kind: fixed_window
        base: 1
        count: 5
        pattern: "./log/test.{}.log"

# Set the default logging level to "warn" and attach the "stdout" appender to the root
root:
  level: info
  appenders:
    - stdout
    - requests

loggers:
  # Raise the maximum log level for events sent to the "app::backend::db" logger to "info"
  #app::backend::db:
  # level: info

  # Route log events sent to the "app::requests" logger to the "requests" appender,
  # and *not* the normal appenders installed at the root
  app::requests:
    level: info
    appenders:
      - requests
    additive: false
