
extend = { path = "build/docker-build-makefile.toml" }

[config]
init_task = "init"
end_task = "end"
#skip_core_tasks = true


[tasks.init]
dependencies = ["create_dep_patchs"]


[tasks.create_dep_patchs]
command = "cargo"
args = ["patch-subdep-ver"]
condition = { files_not_exist = ["target/patch-override-sub-dep"] }


[env]

ROOT_PROJECT_DIR = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}"

# Now no root package (pure workspace)
#ROOT_PROJECT_NAME = "${CARGO_MAKE_WORKSPACE_PACKAGE_NAME}"
#ROOT_PROJECT_VERSION = "${CARGO_MAKE_WORKSPACE_PACKAGE_VERSION}"

DOCKER_MODULES = [ "account_soa", "account_web" ]

# short alias
#ROOT_PROJECT_DIR = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}"
#
# profile based environment override
#[env.development]
#DEV = true
#TARGET_SUB_DIR = "debug"
#[env.production]
#PROD = true
#TARGET_SUB_DIR = "release"


[tasks.format]
condition_script = [" 0 "]
[tasks.format-flow]
condition_script = [" 0 "]
[tasks.format-toml]
condition_script = [" 0 "]
[tasks.format-toml-flow]
condition_script = [" 0 "]


#[tasks.format]
#install_crate = "rustfmt"
#command = "cargo"
#args = ["fmt", "--", "--emit=files"]

#[tasks.clean]
#command = "cargo"
#args = ["clean"]

#[tasks.build]
#command = "cargo"
#args = ["build"]
##dependencies = ["clean"]
#dependencies = []


#[tasks.test-condition]
#condition = {
#    profiles = ["development", "production"],
#    platforms = ["windows", "linux"],
#    channels = ["beta", "nightly"],
#    env_set = [ "CARGO_MAKE_KCOV_VERSION" ],
#    env_not_set = [ "CARGO_MAKE_SKIP_CODECOV" ],
#    env = { "CARGO_MAKE_CI" = true, "CARGO_MAKE_RUN_CODECOV" = true },
#    rust_version = { min = "1.20.0", max = "1.30.0" },
#    files_exist = ["${CARGO_MAKE_WORKING_DIRECTORY}/Cargo.toml"],
#    files_not_exist = ["${CARGO_MAKE_WORKING_DIRECTORY}/Cargo2.toml"],
#    files_modified = { input = ["${CARGO_MAKE_WORKING_DIRECTORY}/Cargo.toml", "./src/**/*.rs"], output = ["./target/**/myapp*"] }
#}
#handlers = [
#    {name = "default", level = "info",  output = "stdout"},
#    {name = "stderr",  level = "error", output = "stderr"},
#    {name = "access",  level = "info",  output = "/var/log/access.log"},
#]

#[tasks.test-condition-files-modified]
#condition = { files_modified = { input = [
#  "./examples/condition.toml",
#  "./src/**/*",
#], output = [
#  "./target/**/cargo-make*",
#] } }
#command = "echo"
#args = ["condition was met, sources updated..."]


# Eample to set var if some arg is present (`cargo make examples verbose`)
# https://github.com/sagiegurari/cargo-make/issues/876
#env_scripts = [
#'''
##!@duckscript
#
#for arg in ${@}
#  verbose_found = eq ${arg} verbose
#  if ${verbose_found}
#    set_env RUSTC_LOG rustc_codegen_ssa::back::link=info
#    goto :postloop
#  end
#end
#:postloop
#'''
#]



#[tasks.private_set_var__src_or_test_are_changed]
#private = true
#condition = { files_modified = { input = ["./Cargo.toml", "./src/**/*.rs", "./tests/**/*.rs", "./test_resources/**/*"], output = ["./target/**/main"] } }
#env = { "PRIVATE_SRC_OR_TEST_SRC_ARE_CHANGED" = true }
#
#
#[tasks.test]
#command = "cargo"
#args = ["test"]
#condition_script = ["""
#    if [ "${CARGO_MAKE_TASK}" = "test" ] || [ "${CARGO_MAKE_TASK}" = "build" ] || [ "${PRIVATE_SRC_OR_TEST_SRC_ARE_CHANGED}" = "true" ]
#    then
#        "true"
#    else
#        "false"
#    fi
#"""]
#dependencies = ["private_set_var__src_or_test_are_changed", "build"]
#
#
#[tasks.implicit-test]
#workspace = false
#dependencies = ["test"]


[tasks.build-members]
workspace = false
private = true
# overriding/disabling predefined build command
# member defined build tasks are really used
#command = {unset = true}
run_task = { name = "build-member", fork = true }


[tasks.test-members]
workspace = false
private = true
# overriding/disabling predefined build command
# member defined build tasks are really used
#command = {unset = true}
run_task = { name = "test-member", fork = true }



#-----------------------------------------------------------------------------------------------------------------------

[tasks.integration-tests]
category = "Test"
workspace = false
env = { CARGO_MAKE_WORKSPACE_INCLUDE_MEMBERS = "${DOCKER_MODULES}" }
# I do not understand why, but member-subtask should have another name?! For this purpose suffix '-member' is added.
run_task = { name = "integration-tests-member", fork = true }



#-----------------------------------------------------------------------------------------------------------------------



###  It was an attempt to build all prod/releases docker images for one shot... but docker does not support it.
###  You cannot now pass several pairs target/tag.
###

#[tasks.build-docker-prod]
#workspace = false
#condition = { profiles = [ "prod", "release" ] }
## !!! SINGLE docker build task for ALL modules with SINGLE multi-stage dockerfile,
## !!! since it is very time/disk-space expensive.
#dependencies = [
#    "build-members",
#    "test-members",
#    "build-docker-prod-account-soa",
#    "build-docker-prod-account-web",
#]
#
#[tasks.build-docker-prod-account-soa]
#workspace = false
#condition = { profiles = [ "prod", "release" ] }
#env = { DOCKER_IMAGE_TARGET = "mvv_account_soa", DOCKER_IMAGE_TAG = "mvv_rust_account_soa", DOCKER_PROJECT_NAME = "mvv_account_soa", DOCKER_PROJECT_VERSION = "${ROOT_PROJECT_VERSION}" }
#run_task = { name = "build-docker-multistage-prod-impl", fork = false }
#
#[tasks.build-docker-prod-account-web]
#workspace = false
#condition = { profiles = [ "prod", "release" ] }
#env = { DOCKER_IMAGE_TARGET = "mvv_account_web", DOCKER_IMAGE_TAG = "mvv_rust_account_web", DOCKER_PROJECT_NAME = "mvv_account_web", DOCKER_PROJECT_VERSION = "${ROOT_PROJECT_VERSION}" }
#run_task = { name = "build-docker-multistage-prod-impl", fork = false }
#
#[tasks.build-docker-debug-local]
#category = "Test"
#workspace = false  # memeber tasks are called manually in 'run_task'
#condition = { profiles = [ "dev", "development", "debug" ] }
#env = { CARGO_MAKE_WORKSPACE_INCLUDE_MEMBERS = "${DOCKER_MODULES}" }
## I do not understand why, but member-subtask should have another name?!
#run_task = { name = "build-docker-debug-local-member", fork = true }



#-----------------------------------------------------------------------------------------------------------------------

#[tasks.package-prod]
#workspace = true
#condition = { profiles = [ "prod", "release" ] }
#dependencies = [
#    # "clean", T O D O: clean our packages or clean ALL??? (after full clean (with dependencies) the rebuild is too expensive)
#    "build-members",
#    "test-members",
#    "build-docker-prod",
#    "integration-tests"
#]
#
#
#[tasks.package-debug]
#workspace = true
#condition = { profiles = [ "dev", "development", "debug" ] }
#run_task = { name = "package-member", fork = true }
#
#
#
#[tasks.package]
#workspace = false
#command = "echo"
#args = [ "workspace package flow" ]
#dependencies = [
#    "package-debug",
#    "package-prod",
#]


[tasks.package]
workspace = true
run_task = { name = "package-member", fork = true }



########################################################################################################################
#                                         Optional aliases                                                             #
########################################################################################################################

[tasks.integration-test]
alias = "integration-tests"
