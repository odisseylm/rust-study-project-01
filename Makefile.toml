
extend = [
    { path = "build/ssl-certs-makefile.toml" },
    { path = "build/code-coverage.toml" },
]

[config]
init_task = "init"
end_task = "end"
#skip_core_tasks = true


[tasks.init]
dependencies = ["create_dep_patchs"]


[tasks.create_dep_patchs]
command = "cargo"
args = ["patch-subdep-ver"]
condition = { files_not_exist = ["target/patch-override-sub-dep"] }


[env]

ROOT_PROJECT_DIR = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}"

# Now no root package (pure workspace)
#ROOT_PROJECT_NAME = "${CARGO_MAKE_WORKSPACE_PACKAGE_NAME}"
#ROOT_PROJECT_VERSION = "${CARGO_MAKE_WORKSPACE_PACKAGE_VERSION}"

DOCKER_MODULES = [ "account_soa", "client_search_grpc_soa", "account_web" ]

# short alias
#ROOT_PROJECT_DIR = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}"
#
# profile based environment override
#[env.development]
#DEV = true
#TARGET_SUB_DIR = "debug"
#[env.production]
#PROD = true
#TARGET_SUB_DIR = "release"


[tasks.format]
condition_script = [" 0 "]
[tasks.format-flow]
condition_script = [" 0 "]
[tasks.format-toml]
condition_script = [" 0 "]
[tasks.format-toml-flow]
condition_script = [" 0 "]


#[tasks.format]
#install_crate = "rustfmt"
#command = "cargo"
#args = ["fmt", "--", "--emit=files"]

#[tasks.clean]
#command = "cargo"
#args = ["clean"]


#[tasks.test-condition]
#condition = {
#    profiles = ["development", "production"],
#    platforms = ["windows", "linux"],
#    channels = ["beta", "nightly"],
#    env_set = [ "CARGO_MAKE_KCOV_VERSION" ],
#    env_not_set = [ "CARGO_MAKE_SKIP_CODECOV" ],
#    env = { "CARGO_MAKE_CI" = true, "CARGO_MAKE_RUN_CODECOV" = true },
#    rust_version = { min = "1.20.0", max = "1.30.0" },
#    files_exist = ["${CARGO_MAKE_WORKING_DIRECTORY}/Cargo.toml"],
#    files_not_exist = ["${CARGO_MAKE_WORKING_DIRECTORY}/Cargo2.toml"],
#    files_modified = { input = ["${CARGO_MAKE_WORKING_DIRECTORY}/Cargo.toml", "./src/**/*.rs"], output = ["./target/**/myapp*"] }
#}
#handlers = [
#    {name = "default", level = "info",  output = "stdout"},
#    {name = "stderr",  level = "error", output = "stderr"},
#    {name = "access",  level = "info",  output = "/var/log/access.log"},
#]

#[tasks.test-condition-files-modified]
#condition = { files_modified = { input = [
#  "./examples/condition.toml",
#  "./src/**/*",
#], output = [
#  "./target/**/cargo-make*",
#] } }
#command = "echo"
#args = ["condition was met, sources updated..."]


# Eample to set var if some arg is present (`cargo make examples verbose`)
# https://github.com/sagiegurari/cargo-make/issues/876
#env_scripts = [
#'''
##!@duckscript
#
#for arg in ${@}
#  verbose_found = eq ${arg} verbose
#  if ${verbose_found}
#    set_env RUSTC_LOG rustc_codegen_ssa::back::link=info
#    goto :postloop
#  end
#end
#:postloop
#'''
#]



#[tasks.private_set_var__src_or_test_are_changed]
#private = true
#condition = { files_modified = { input = ["./Cargo.toml", "./src/**/*.rs", "./tests/**/*.rs", "./test_resources/**/*"], output = ["./target/**/main"] } }
#env = { "PRIVATE_SRC_OR_TEST_SRC_ARE_CHANGED" = true }
#
#
#[tasks.test]
#command = "cargo"
#args = ["test"]
#condition_script = ["""
#    if [ "${CARGO_MAKE_TASK}" = "test" ] || [ "${CARGO_MAKE_TASK}" = "build" ] || [ "${PRIVATE_SRC_OR_TEST_SRC_ARE_CHANGED}" = "true" ]
#    then
#        "true"
#    else
#        "false"
#    fi
#"""]
#dependencies = ["private_set_var__src_or_test_are_changed", "build"]
#
#
#[tasks.implicit-test]
#workspace = false
#dependencies = ["test"]



#----------------------------------------------------------------------------------------------------
#                                        Custom clean
#----------------------------------------------------------------------------------------------------
#
# Custom clean task to avoid deleting patch-override-sub-dep subdir
#
[tasks.clean]
workspace = false
command = "echo" # I do not know how unset 'command' (command={unset=true} does not work)
args = ["Cleaning ..."]
dependencies = [ "clean-impl" ]


[tasks.clean-impl]
workspace = false
script = '''
    echo Cleaning ${CARGO_MAKE_CRATE_TARGET_DIRECTORY}

    rm -r -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/coverage-raw"
    rm -r -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/code-coverage"
    rm -r -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/coverage"
    rm -r -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/debug"
    rm -r -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/externals"
    rm -r -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/generated-test-resources"
    echo 'skip patch-override-sub-dep' # rm -r ${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/patch-override-sub-dep
    rm -r -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/proto"
    rm -r -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/release"
    rm -r -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/temp"
    rm -r -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/tmp"

    rm -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/.rustc_info.json"
    rm -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/buildId"
    rm -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/CACHEDIR.TAG"
    rm -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/code-coverage-result.txt"
    rm -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/*.profdata" # Does it work?
    rm -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/code-coverage-merged.profdata"
    rm -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/merged.profdata"
    rm -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/*-openapi.json" # Does it work?
    rm -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/mvv_account_soa-openapi.json"

    # Why do we have such files? Maybe by RustRover??
    rm -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/default_*.profraw" # Seems it does not work??
    find  "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}" -maxdepth 1 -name default_*.profraw -delete
'''



[tasks.clean-modules]
workspace = false
script = '''
    echo Cleaning only modules

    rm -r -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/code-coverage"
    rm -r -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/coverage"
    rm -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/code-coverage-result.txt"

    rm -r -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/generated-test-resources"
    rm -r -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/proto"

    rm -f "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/mvv_account_soa-openapi.json"

    cd "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/debug"
    rm -f *.lib *.so *.rlib *.d
    rm -r -f health_checker http_health_checker
    rm -r -f mvv_account_soa mvv_account_web mvv_client_search_soa
    # rm -r -f xtask

    cd "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/debug/build"
    rm -r -f *account_soa*  *account_web*  mvv_auth*
    rm -r -f *client_search_soa*  *client_search_grpc_soa*
    rm -r -f *mvv_common*  *common_bank_entities*  *error_macro*
    rm -r -f *health_check*  *proc_macro*  *tuple_heter_iter*
    rm -r -f *tuple_heter_iter_macro*  *xtask*

    cd "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/debug/deps"
    rm -r -f *account_soa*  *account_web*  mvv_auth*
    rm -r -f *client_search_soa*  *client_search_grpc_soa*
    rm -r -f *mvv_common*  *common_bank_entities*  *error_macro*
    rm -r -f *health_check*  *proc_macro*  *tuple_heter_iter*
    rm -r -f *tuple_heter_iter_macro*  *xtask*
    rm -r -f *_test_*  *_test*  *test_*

    cd "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/debug/incremental"
    rm -r -f *account_soa*  *account_web*  mvv_auth*
    rm -r -f *client_search_soa*  *client_search_grpc_soa*
    rm -r -f *mvv_common*  *common_bank_entities*  *error_macro*
    rm -r -f *health_check*  *proc_macro*  *tuple_heter_iter*
    rm -r -f *tuple_heter_iter_macro*  *xtask*
    rm -r -f *_test_*  *_test*  *test_*

    cd "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/debug/.fingerprint"
    rm -r -f *account_soa*  *account_web*  mvv_auth*
    rm -r -f *client_search_soa*  *client_search_grpc_soa*
    rm -r -f *mvv_common*  *common_bank_entities*  *error_macro*
    rm -r -f *health_check*  *proc_macro*  *tuple_heter_iter*
    rm -r -f *tuple_heter_iter_macro*  *xtask*
'''


#----------------------------------------------------------------------------------------------------
#                                        Build & Test members
#----------------------------------------------------------------------------------------------------
[tasks.build-members]
workspace = false
private = true
# overriding/disabling predefined build command
# member defined build tasks are really used
#command = {unset = true}
run_task = { name = "build-member", fork = true }


[tasks.build]
command = "true" # Do nothing. Override default command ('cargo make' does not allow just unset it)
args = []
dependencies = [ "build-members" ]


[tasks.test-members]
workspace = false
private = true
# overriding/disabling predefined build command
# 'test' member defined build tasks are really used
#command = {unset = true}
run_task = { name = "test-member", fork = true }


[tasks.test]
command = "true" # Do nothing. Override default command ('cargo make' does not allow just unset it)
args = []
dependencies = [
    "build-members",
    "test-members",
]


#-----------------------------------------------------------------------------------------------------------------------

[tasks.build-docker]
category = "Docker"
workspace = false
env = { CARGO_MAKE_WORKSPACE_INCLUDE_MEMBERS = "${DOCKER_MODULES}" }
# I do not understand why, but member-subtask should have another name?! For this purpose suffix '-member' is used.
run_task = { name = "build-docker-member", fork = true }


[tasks.integration-tests]
category = "Test"
workspace = false
env = { CARGO_MAKE_WORKSPACE_INCLUDE_MEMBERS = "${DOCKER_MODULES}" }
# I do not understand why, but member-subtask should have another name?! For this purpose suffix '-member' is used.
run_task = { name = "integration-tests-member", fork = true }


[tasks.package]
workspace = false
# I do not understand why, but member-subtask should have another name?! For this purpose suffix '-member' is used.
run_task = { name = "package-member", fork = true }


#----------------------------------------------------------------------------------------------------
#                                        Code coverage
#----------------------------------------------------------------------------------------------------
[tasks.build-members-with-coverage]
workspace = false
private = true
# overriding/disabling predefined build command
# member defined build tasks are really used
#command = {unset = true}
run_task = { name = "build-member-with-coverage", fork = true }
dependencies = [ "init-code-coverage" ]


[tasks.build-with-coverage]
workspace = false
command = "true" # Do nothing. Override default command ('cargo make' does not allow just unset it)
args = []
dependencies = [ "init-code-coverage", "build-members-with-coverage" ]


[tasks.test-members-with-coverage]
workspace = false
private = true
# overriding/disabling predefined build command
# 'test' member defined build tasks are really used
#command = {unset = true}
run_task = { name = "test-member-with-coverage", fork = true }
dependencies = [ "init-code-coverage" ]


[tasks.test-with-coverage]
workspace = false
command = "true" # Do nothing. Override default command ('cargo make' does not allow just unset it)
args = []
dependencies = [
    "init-code-coverage",
    "build-members-with-coverage",
    "test-members-with-coverage",
    "process-code-coverage",
]


[tasks.build-docker-with-coverage]
category = "Docker"
workspace = false
env = { CARGO_MAKE_WORKSPACE_INCLUDE_MEMBERS = "${DOCKER_MODULES}" }
# I do not understand why, but member-subtask should have another name?! For this purpose suffix '-member' is used.
run_task = { name = "build-docker-debug-local-with-coverage-member", fork = true }
dependencies = [ "init-code-coverage" ]


[tasks.integration-tests-with-coverage]
category = "Test"
workspace = false
env = { CARGO_MAKE_WORKSPACE_INCLUDE_MEMBERS = "${DOCKER_MODULES}" }
# I do not understand why, but member-subtask should have another name?! For this purpose suffix '-member' is used.
run_task = { name = "integration-tests-with-coverage-member", fork = true }
dependencies = [ "init-code-coverage" ]


[tasks.package-with-coverage]
workspace = false
# I do not understand why, but member-subtask should have another name?! For this purpose suffix '-member' is used.
run_task = { name = "package-with-coverage-member", fork = true }
dependencies = [ "init-code-coverage" ]



########################################################################################################################
#                                         Optional aliases                                                             #
########################################################################################################################

[tasks.integration-test]
alias = "integration-tests"
[tasks.it-tests]
alias = "integration-tests"

#-----------------------------------------------------------------------------------------------------------------------

[tasks.build-cov]
alias = "build-with-coverage"
[tasks.build-covered]
alias = "build-with-coverage"

[tasks.build-docker-cov]
alias = "build-docker-with-coverage"
[tasks.build-docker-covered]
alias = "build-docker-with-coverage"

[tasks.package-cov]
alias = "package-with-coverage"
[tasks.package-covered]
alias = "package-with-coverage"

[tasks.it-tests-cov]
alias = "integration-tests-with-coverage"
[tasks.it-tests-covered]
alias = "integration-tests-with-coverage"
[tasks.it-tests-with-coverage]
alias = "integration-tests-with-coverage"
