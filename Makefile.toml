
#[config]
#skip_core_tasks = true

[env]
# Vars
RUST_BACKTRACE = 1

EVALUATED_VAR = { script = ["echo SOME VALUE"] }
STRING = "value"
BOOL_VALUE = true
COMPOSITE = "${BOOL_VALUE} ${RUST_BACKTRACE}"
LIST_VALUE = [ "VALUE1", "VALUE2", "VALUE3" ]
VARIABLE = {unset = true}

# short alias
PROJECT_DIR = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}"

# profile based environment override
[env.development]
DEV = true

[env.production]
PROD = true


[tasks.format]
condition_script = [" 0 "]
[tasks.format-flow]
condition_script = [" 0 "]
[tasks.format-toml]
condition_script = [" 0 "]
[tasks.format-toml-flow]
condition_script = [" 0 "]


#[tasks.format]
#install_crate = "rustfmt"
#command = "cargo"
#args = ["fmt", "--", "--emit=files"]

#[tasks.clean]
#command = "cargo"
#args = ["clean"]

#[tasks.build]
#command = "cargo"
#args = ["build"]
##dependencies = ["clean"]
#dependencies = []


#[tasks.test-condition]
#condition = {
#    profiles = ["development", "production"],
#    platforms = ["windows", "linux"],
#    channels = ["beta", "nightly"],
#    env_set = [ "CARGO_MAKE_KCOV_VERSION" ],
#    env_not_set = [ "CARGO_MAKE_SKIP_CODECOV" ],
#    env = { "CARGO_MAKE_CI" = true, "CARGO_MAKE_RUN_CODECOV" = true },
#    rust_version = { min = "1.20.0", max = "1.30.0" },
#    files_exist = ["${CARGO_MAKE_WORKING_DIRECTORY}/Cargo.toml"],
#    files_not_exist = ["${CARGO_MAKE_WORKING_DIRECTORY}/Cargo2.toml"],
#    files_modified = { input = ["${CARGO_MAKE_WORKING_DIRECTORY}/Cargo.toml", "./src/**/*.rs"], output = ["./target/**/myapp*"] }
#}
#handlers = [
#    {name = "default", level = "info",  output = "stdout"},
#    {name = "stderr",  level = "error", output = "stderr"},
#    {name = "access",  level = "info",  output = "/var/log/access.log"},
#]

[tasks.test-condition-files-modified]
condition = { files_modified = { input = [
  "./examples/condition.toml",
  "./src/**/*",
], output = [
  "./target/**/cargo-make*",
] } }
command = "echo"
args = ["condition was met, sources updated..."]


# Eample to set var if some arg is present (`cargo make examples verbose`)
# https://github.com/sagiegurari/cargo-make/issues/876
#env_scripts = [
#'''
##!@duckscript
#
#for arg in ${@}
#  verbose_found = eq ${arg} verbose
#  if ${verbose_found}
#    set_env RUSTC_LOG rustc_codegen_ssa::back::link=info
#    goto :postloop
#  end
#end
#:postloop
#'''
#]




[tasks.private_set_var__src_or_test_are_changed]
private = true
#condition = { files_modified = { input = ["${CARGO_MAKE_WORKING_DIRECTORY}/Cargo.toml", otheers ], output = ["./target/**/main"] } }
condition = { files_modified = { input = ["./Cargo.toml", "./src/**/*.rs", "./tests/**/*.rs", "./test_resources/**/*"], output = ["./target/**/main"] } }
env = { "PRIVATE_SRC_OR_TEST_SRC_ARE_CHANGED" = true }


[tasks.test]
command = "cargo"
args = ["test"]
condition_script = ["""
    if [ "${CARGO_MAKE_TASK}" = "test" ] || [ "${CARGO_MAKE_TASK}" = "build" ] || [ "${PRIVATE_SRC_OR_TEST_SRC_ARE_CHANGED}" = "true" ]
    then
        "true"
    else
        "false"
    fi
"""]
dependencies = ["private_set_var__src_or_test_are_changed", "build"]


[tasks.implicit-test]
workspace = false
dependencies = ["test"]


[tasks.my-flow]
env = { "SOME_ENV_VAR" = "value" }
script = '''
echo var: ${SOME_ENV_VAR}
'''
workspace = false
dependencies = [
    "build",
    "test"
]

[tasks.myflow]
alias = "my-flow"


# TODO: How to reuse it?
[tasks.private_docker_build_prepare_labels]
env = { DOCKER_IMAGE_LABELS = [
    "--label", "PROJECT_NAME=${CARGO_MAKE_PROJECT_NAME}",
    "--label", "PACKAGE_NAME=${CARGO_MAKE_PROJECT_NAME}",
    "--label", "PROJECT_VERSION=${CARGO_MAKE_CRATE_VERSION}",
    "--label", "PACKAGE_VERSION=${CARGO_MAKE_CRATE_VERSION}",
    # Hm... CARGO_MAKE_PROJECT_VERSION is not set?!
    #"--label", "PROJECT_VERSION=${CARGO_MAKE_PROJECT_VERSION}",
    #"--label", "PACKAGE_VERSION=${CARGO_MAKE_PROJECT_VERSION}",
    "--label", "GIT_BRANCH=${CARGO_MAKE_GIT_BRANCH}",
    "--label", "GIT_USER_NAME=${CARGO_MAKE_GIT_USER_NAME}",
    "--label", "GIT_HEAD_LAST_COMMIT_HASH=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH}",
    "--label", "GIT_HEAD_LAST_COMMIT_HASH_PREFIX=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH_PREFIX}",
] }



[tasks.build-docker]
command = "docker"
args = [
    "build",
    "--file", "docker/Dockerfile",
    "--tag", "rust-mvv-webapp",
    # ?? How to reuse it?
    #    ${DOCKER_IMAGE_LABELS},
    "--label", "PROJECT_NAME=${CARGO_MAKE_PROJECT_NAME}",
    "--label", "PACKAGE_NAME=${CARGO_MAKE_PROJECT_NAME}",
    "--label", "PROJECT_VERSION=${CARGO_MAKE_CRATE_VERSION}",
    "--label", "PACKAGE_VERSION=${CARGO_MAKE_CRATE_VERSION}",
    # Hm... CARGO_MAKE_PROJECT_VERSION is not set?!
    #"--label", "PROJECT_VERSION=${CARGO_MAKE_PROJECT_VERSION}",
    #"--label", "PACKAGE_VERSION=${CARGO_MAKE_PROJECT_VERSION}",
    "--label", "GIT_BRANCH=${CARGO_MAKE_GIT_BRANCH}",
    "--label", "GIT_USER_NAME=${CARGO_MAKE_GIT_USER_NAME}",
    "--label", "GIT_HEAD_LAST_COMMIT_HASH=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH}",
    "--label", "GIT_HEAD_LAST_COMMIT_HASH_PREFIX=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH_PREFIX}",
    ".",]
workspace = false
dependencies = [
    "build",
    "test",
    "private_docker_build_prepare_labels",
]


[tasks.build-debug-docker]
command = "docker"
args = ["build", "--file", "docker/Dockerfile",
    "--tag", "rust-mvv-webapp-debug",
    "--build-arg", "RELEASE_OR_DEBUG_BUILD_PARAM=",
    "--build-arg", "RELEASE_OR_DEBUG_TARGET_DIR=./target/debug",
    # ?? How to reuse it?
    #${DOCKER_IMAGE_LABELS},
    "--label", "PROJECT_NAME=${CARGO_MAKE_PROJECT_NAME}",
    "--label", "PACKAGE_NAME=${CARGO_MAKE_PROJECT_NAME}",
    "--label", "PROJECT_VERSION=${CARGO_MAKE_CRATE_VERSION}",
    "--label", "PACKAGE_VERSION=${CARGO_MAKE_CRATE_VERSION}",
    # Hm... CARGO_MAKE_PROJECT_VERSION is not set?!
    #"--label", "PROJECT_VERSION=${CARGO_MAKE_PROJECT_VERSION}",
    #"--label", "PACKAGE_VERSION=${CARGO_MAKE_PROJECT_VERSION}",
    "--label", "GIT_BRANCH=${CARGO_MAKE_GIT_BRANCH}",
    "--label", "GIT_USER_NAME=${CARGO_MAKE_GIT_USER_NAME}",
    "--label", "GIT_HEAD_LAST_COMMIT_HASH=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH}",
    "--label", "GIT_HEAD_LAST_COMMIT_HASH_PREFIX=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH_PREFIX}",
    ".",]
workspace = false
dependencies = [
    "build",
    "test",
    "private_docker_build_prepare_labels",
]

[tasks.docker_build]
workspace = false
alias = "docker-build"


[tasks.get-ubuntu-info-vars]
workspace = false
# get Ubuntu bersion => cat /etc/os-release | grep VERSION_ID | sed -e "s/^VERSION_ID=\"//" -e "s/\"//"
env = { UBUNTU_VERSION = { script = ["cat /etc/os-release | grep VERSION_ID | sed -e \"s/^VERSION_ID=\\\"//\"  -e \"s/\\\"//\""] } }
script = "echo UBUNTU_VERSION: ${UBUNTU_VERSION}"


[tasks.build-debug-local-docker]
command = "docker"
args = ["build", "--file", "docker/Dockerfile-local",
    "--tag", "rust-mvv-webapp-debug",
    "--build-arg", "UBUNTU_VERSION=${UBUNTU_VERSION}",
    # ?? How to reuse it?
    #${DOCKER_IMAGE_LABELS},
    "--label", "PROJECT_NAME=${CARGO_MAKE_PROJECT_NAME}",
    "--label", "PACKAGE_NAME=${CARGO_MAKE_PROJECT_NAME}",
    "--label", "PROJECT_VERSION=${CARGO_MAKE_CRATE_VERSION}",
    "--label", "PACKAGE_VERSION=${CARGO_MAKE_CRATE_VERSION}",
    # Hm... CARGO_MAKE_PROJECT_VERSION is not set?!
    #"--label", "PROJECT_VERSION=${CARGO_MAKE_PROJECT_VERSION}",
    #"--label", "PACKAGE_VERSION=${CARGO_MAKE_PROJECT_VERSION}",
    "--label", "GIT_BRANCH=${CARGO_MAKE_GIT_BRANCH}",
    "--label", "GIT_USER_NAME=${CARGO_MAKE_GIT_USER_NAME}",
    "--label", "GIT_HEAD_LAST_COMMIT_HASH=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH}",
    "--label", "GIT_HEAD_LAST_COMMIT_HASH_PREFIX=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH_PREFIX}",
    ".",]
workspace = false
dependencies = [
    "get-ubuntu-info-vars",
    "build",
    # "test",
    "private_docker_build_prepare_labels",
]



[tasks.docker-compose-up]
command = "docker-compose"
args = [
    "--file", "${PROJECT_DIR}/docker/docker-compose-012.yml",      # ${docker-compose-file}",
    "--env-file", "${PROJECT_DIR}/docker/docker-compose-012.env",  # "${docker-env-file}",
    "--project-directory", "${PROJECT_DIR}",
    "--project-name", "rust-account-soa-project",                # "${project.artifactId}",
    "up",
    #"rust-account-soa", # "${docker-compose-service-up}",
    ]
workspace = false
#dependencies = [
#    "build",
#    "test",
#    "private_docker_build_prepare_labels",
#]



[tasks.docker-compose-down]
command = "docker-compose"
args = [
    "--file", "${PROJECT_DIR}/docker/docker-compose-012.yml",      # ${docker-compose-file}",
    "--env-file", "${PROJECT_DIR}/docker/docker-compose-012.env",  # "${docker-env-file}",
    "--project-directory", "${PROJECT_DIR}",
    "--project-name", "rust-account-soa-project",                # "${project.artifactId}",
    "down",
    #"rust-account-soa", # "${docker-compose-service-up}",
    ]
workspace = false
#dependencies = [
#    "build",
#    "test",
#    "private_docker_build_prepare_labels",
#]



[tasks.docker-compose-rerun]
workspace = false
dependencies = [
    # "build",
    # "test",
    # "build-debug-docker",
    "docker-compose-down",
    "docker-compose-up",
]



[tasks.docker-debug-rebuild-rerun-all]
workspace = false
dependencies = [
    "build",
    # "test",
    "build-debug-docker",
    "docker-compose-down",
    "docker-compose-up",
]


[tasks.docker-compose-down-up]
workspace = false
dependencies = [
    "docker-compose-down",
    "docker-compose-up",
]


[tasks.task1]
workspace = false
script = "echo  '                                                             **********   task1'"

[tasks.task2]
workspace = false
script = "echo  '                                                             **********   task2'"
dependencies = ["task1" ]
condition_script = [" 0 "]

[tasks.task3]
workspace = false
script = "echo  '                                                             **********   task3'"
dependencies = ["task2" ]
