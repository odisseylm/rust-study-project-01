
extend = [
    { path = "ssl-simple-certs-makefile.toml" },
    { path = "ssl-ca-certs-openssl11-makefile.toml" },
    { path = "ssl-ca-certs-openssl3-makefile.toml" },
]



[tasks.determine-openssl-ver]
script = '''
    #!@duckscript

    openssl_str_ver_out = exec openssl version -v
    openssl_str_ver = set ${openssl_str_ver_out.stdout}
    openssl_str_ver = trim ${openssl_str_ver}

    echo " ### OpenSSL full ver string: ${openssl_str_ver} "    # output: OpenSSL 1.1.1f  31 Mar 2020

    openssl_str_ver = replace ${openssl_str_ver} "OpenSSL" ""
    openssl_str_ver = trim ${openssl_str_ver}

    if starts_with ${openssl_str_ver} "1.1.1"
        OPENSSL_VERSION = set "OpenSSL_11"
    elseif starts_with ${openssl_str_ver} "3."
        OPENSSL_VERSION = set "OpenSSL_3X"
    else
        echo " ### Unexpected OpenSSL version [${openssl_str_ver}]"
        error "Unexpected OpenSSL version [${openssl_str_ver}]"
    end

    echo " ### Current OpenSSL version type: ${OPENSSL_VERSION} "
    set_env OPENSSL_VERSION "${OPENSSL_VERSION}"
'''




## Simple approach: cert + key (without CA)
##
#[tasks.generate-ssl-certs]
#private  = false
#env = { SSL_CERTS_SUBDIR = "ssl-simple" }
#extend = "copy-ssl-certs"
#dependencies = [ "generate-ssl-simple-certs" ]
#[tasks.regenerate-ssl-certs]
#private  = false
#env = { SSL_CERTS_SUBDIR = "ssl-simple" }
#extend = "copy-ssl-certs"
#dependencies = [ "regenerate-ssl-simple-certs" ]


## CA approach: CA + cert + key
##
#[tasks.generate-ssl-certs]
#private  = false
#env = { SSL_CERTS_SUBDIR = "ssl-ca-openssl11" }
#extend = "copy-ssl-certs"
#dependencies = [ "generate-openssl11-ssl-ca-certs" ]
#
#[tasks.regenerate-ssl-certs]
#private  = false
#env = { SSL_CERTS_SUBDIR = "ssl-ca-openssl11" }
#extend = "copy-ssl-certs"
#dependencies = [ "regenerate-openssl11-ssl-ca-certs" ]


# CA approach: CA + cert + key (by openssl3)
#
#[tasks.generate-ssl-certs]
#private  = false
#env = { SSL_CERTS_SUBDIR = "ssl-ca-openssl3" }
#extend = "copy-ssl-certs"
#dependencies = [ "generate-openssl3-ssl-ca-certs" ]
#
#[tasks.regenerate-ssl-certs]
#private  = false
#env = { SSL_CERTS_SUBDIR = "ssl-ca-openssl3" }
#extend = "copy-ssl-certs"
#dependencies = [ "regenerate-openssl3-ssl-ca-certs" ]



## CA approach: CA + cert + key
##
#[tasks.generate-ssl-certs]
#private  = false
#env = { SSL_CERTS_SUBDIR = "ssl-ca-openssl11" }
#extend = "copy-ssl-certs"
#dependencies = [ "generate-openssl11-ssl-ca-certs" ]
#
#[tasks.regenerate-ssl-certs]
#private  = false
#env = { SSL_CERTS_SUBDIR = "ssl-ca-openssl11" }
#extend = "copy-ssl-certs"
#dependencies = [ "regenerate-openssl11-ssl-ca-certs" ]



# CA approach: CA + cert + key (by openssl3)
#
[tasks.generate-ssl-certs-openssl11-auto-delegate]
private  = true
condition = { env = { "OPENSSL_VERSION" = "OpenSSL_11" } }
env = { SSL_CERTS_SUBDIR = "ssl-ca-openssl11" }
run_task = { name = [ "generate-openssl11-ssl-ca-certs", "copy-ssl-certs" ] }
dependencies = [ "determine-openssl-ver" ]

[tasks.regenerate-ssl-certs-openssl11-auto-delegate]
private  = true
condition = { env = { "OPENSSL_VERSION" = "OpenSSL_11" } }
env = { SSL_CERTS_SUBDIR = "ssl-ca-openssl11" }
run_task = { name = [ "regenerate-openssl11-ssl-ca-certs", "copy-ssl-certs" ] }
dependencies = [ "determine-openssl-ver" ]

[tasks.generate-ssl-certs-openssl3-auto-delegate]
private  = false
condition = { env = { "OPENSSL_VERSION" = "OpenSSL_3X" } }
env = { SSL_CERTS_SUBDIR = "ssl-ca-openssl3" }
run_task = { name = [ "generate-openssl3-ssl-ca-certs", "copy-ssl-certs" ] }
dependencies = [ "determine-openssl-ver" ]

[tasks.regenerate-ssl-certs-openssl3-auto-delegate]
private  = false
condition = { env = { "OPENSSL_VERSION" = "OpenSSL_3X" } }
env = { SSL_CERTS_SUBDIR = "ssl-ca-openssl3" }
run_task = { name = [ "generate-openssl3-ssl-ca-certs", "copy-ssl-certs" ] }
dependencies = [ "determine-openssl-ver" ]


[tasks.generate-ssl-certs]
dependencies = [ "generate-ssl-certs-openssl11-auto-delegate", "generate-ssl-certs-openssl3-auto-delegate" ]
[tasks.regenerate-ssl-certs]
dependencies = [ "regenerate-ssl-certs-openssl11-auto-delegate", "regenerate-ssl-certs-openssl3-auto-delegate" ]




[tasks.copy-ssl-certs]
private = true
script = '''
    ### I ried to use ducksript... but it does not support file masks :-(

    echo " ### copy-ssl-certs "

    # !!! Its /bin/sh and SPACES around '=' NOT ALLOWED !!!
    SSL_RES_COMMON_SUBDIR=ssl
    SSL_RES_COMMON_DIR="${ROOT_PROJECT_DIR}/target/generated-test-resources/${SSL_RES_COMMON_SUBDIR}"

    mkdir -p "${SSL_RES_COMMON_DIR}"

    cd "${SSL_RES_COMMON_DIR}"
    echo " ### cleaning [generated-test-resources/ssl] dir "
    rm -f *.key *.crt *.cert *.pem *.csr *.srl *index.txt *index.txt.attr *.attr.old openssl*.cnf *index.txt.old *serial.txt *serial.txt.old

    echo " ### copy files from '${SSL_CERTS_SUBDIR}' to '${SSL_RES_COMMON_SUBDIR}' "
    cp -a "${ROOT_PROJECT_DIR}/target/generated-test-resources/${SSL_CERTS_SUBDIR}/." "${SSL_RES_COMMON_DIR}"
'''



########################################################################################################################
#                                         Optional aliases                                                             #
########################################################################################################################

[tasks.generate-certs]
alias = "generate-ssl-certs"
[tasks.gen-ssl-certs]
alias = "generate-ssl-certs"
[tasks.gen-certs]
alias = "generate-ssl-certs"

[tasks.regenerate-certs]
alias = "regenerate-ssl-certs"
[tasks.regen-ssl-certs]
alias = "regenerate-ssl-certs"
[tasks.regen-certs]
alias = "regenerate-ssl-certs"
