

[tasks.generate-ca-ssl-certs-prepare]
private = true
workspace = false
env = { TEST_CERTS_DIR = "${ROOT_PROJECT_DIR}/target/generated-test-resources/ssl-ca-openssl11", SSL_CONF_DIR = "${ROOT_PROJECT_DIR}/conf/openssl" }
script = ''' mkdir -p "${TEST_CERTS_DIR}" '''



[tasks.delete-ca-ssl-certs]
private = true
workspace = false
cwd = "${TEST_CERTS_DIR}"
script = [ "rm -f *.key *.crt *.cert *.pem *.csr *index.txt *index.txt.attr *index.txt.old *serial.txt *serial.txt.old" ]
dependencies = ["generate-ca-ssl-certs-prepare"]



[tasks.gen-root-ssl-ca]
private = true
workspace = false
condition = { files_not_exist = ["${TEST_CERTS_DIR}/ca.key.pem", "${TEST_CERTS_DIR}/ca.crt.pem"] }
cwd = "${TEST_CERTS_DIR}"
script = '''
    echo " ### generating root CA ca.key.pem/ca.crt.pem "
    openssl req -x509 -config ${SSL_CONF_DIR}/openssl-ca.cnf -days 365 -newkey rsa:4096 -sha256 -keyout ${TEST_CERTS_DIR}/ca.key.pem -nodes -out ${TEST_CERTS_DIR}/ca.crt.pem -outform PEM -subj "/C=US/ST=CA/O=MyOrg, Inc./CN=localhost ca"

    echo " ### generated root CA ca.key.pem/ca.crt.pem "
    openssl x509 -in ${TEST_CERTS_DIR}/ca.crt.pem -text -noout

    echo " ### init index.txt & serial.txt "
    touch ${TEST_CERTS_DIR}/index.txt
    echo '01' > ${TEST_CERTS_DIR}/serial.txt
'''
dependencies = ["generate-ca-ssl-certs-prepare"]



[tasks.gen-ca-serv-ssl-cert]
private = true
workspace = false
cwd = "${TEST_CERTS_DIR}"
script = '''
    echo " ### generating ${SERV_NAME} opnessl conf "
    cat ${SSL_CONF_DIR}/openssl-serv.cnf      > ${TEST_CERTS_DIR}/openssl-${SERV_NAME}.cnf
    echo "\n[ alternate_names ]\n"           >> ${TEST_CERTS_DIR}/openssl-${SERV_NAME}.cnf
    echo "DNS.1 = ${SERV_NAME}\n"            >> ${TEST_CERTS_DIR}/openssl-${SERV_NAME}.cnf
    echo "DNS.2 = localhost\n"               >> ${TEST_CERTS_DIR}/openssl-${SERV_NAME}.cnf
    echo "DNS.3 = ${SERV_NAME}-0\n"          >> ${TEST_CERTS_DIR}/openssl-${SERV_NAME}.cnf
    echo "DNS.4 = ${SERV_NAME}_0\n"          >> ${TEST_CERTS_DIR}/openssl-${SERV_NAME}.cnf
    echo "DNS.5 = ${SERV_NAME}-1\n"          >> ${TEST_CERTS_DIR}/openssl-${SERV_NAME}.cnf
    echo "DNS.6 = ${SERV_NAME}_1\n"          >> ${TEST_CERTS_DIR}/openssl-${SERV_NAME}.cnf
    echo "DNS.7 = ${SERV_NAME}-2\n"          >> ${TEST_CERTS_DIR}/openssl-${SERV_NAME}.cnf
    echo "DNS.8 = ${SERV_NAME}_2\n"          >> ${TEST_CERTS_DIR}/openssl-${SERV_NAME}.cnf

    echo " ### generating cert request ${SERV_NAME}.crt.csr "
    openssl req -config ${TEST_CERTS_DIR}/openssl-${SERV_NAME}.cnf -newkey rsa:2048 -sha256 -keyout ${TEST_CERTS_DIR}/${SERV_NAME}.key.pem -nodes -out ${TEST_CERTS_DIR}/${SERV_NAME}.crt.csr -outform PEM -subj "/C=US/ST=CA/O=MyOrg, Inc./CN=${SERV_NAME}-CN"

    echo " ### 04 "
    openssl req -text -noout -verify -in ${TEST_CERTS_DIR}/${SERV_NAME}.crt.csr

    echo " ### open-ssl => signing to index.txt/ "
    openssl ca -batch -config ${SSL_CONF_DIR}/openssl-ca.cnf -cert ${TEST_CERTS_DIR}/ca.crt.pem     \
        -keyfile ${TEST_CERTS_DIR}/ca.key.pem -policy signing_policy -extensions signing_req   \
        -out ${TEST_CERTS_DIR}/${SERV_NAME}.crt.pem -infiles ${TEST_CERTS_DIR}/${SERV_NAME}.crt.csr

    echo " ### resulting ${SERV_NAME}.crt.pem "
    openssl x509 -in ${TEST_CERTS_DIR}/${SERV_NAME}.crt.pem -text -noout

    chmod ugo+r "${TEST_CERTS_DIR}/${SERV_NAME}.key.pem"


    #openssl req -x509 -new -nodes -newkey rsa:2048 -keyout myCA.key \
    #    -sha256 -days 1825 -out myCA.crt -subj /CN='localhost ca'

    #openssl req -newkey rsa:2048 -nodes -keyout localhost.key -out localhost.csr \
    #    -subj /CN=localhost -addext subjectAltName=DNS:localhost

    #openssl x509 -req -in localhost.csr -copy_extensions copy \
    #    -CA myCA.crt -CAkey myCA.key -CAcreateserial -out localhost.crt -days 365 -sha256

    # sudo cp myCA.crt /etc/pki/ca-trust/source/anchors/
    # sudo update-ca-trust
'''
dependencies = [
    "generate-ca-ssl-certs-prepare",
    "gen-root-ssl-ca",
]


[tasks.gen-database-ssl-cert]
extend = "gen-ca-serv-ssl-cert"
private = true
workspace = false
# We cannot use ${SERV_NAME} in condition because env is applied after condition
condition = { files_not_exist = ["${TEST_CERTS_DIR}/database.key.pem", "${TEST_CERTS_DIR}/database.crt.pem"] }
env = { SERV_NAME = "database" }
dependencies = [ # seems dependencies are not inherited in current 'cargo make' version
    "generate-ca-ssl-certs-prepare",
    "gen-root-ssl-ca",
]

[tasks.gen-account-soa-ssl-cert]
extend = "gen-ca-serv-ssl-cert"
private = true
workspace = false
# We cannot use ${SERV_NAME} in condition because env is applied after condition
condition = { files_not_exist = ["${TEST_CERTS_DIR}/rust-account-soa.key.pem", "${TEST_CERTS_DIR}/rust-account-soa.crt.pem"] }
env = { SERV_NAME = "rust-account-soa" }
dependencies = [ # seems dependencies are not inherited in current 'cargo make' version
    "generate-ca-ssl-certs-prepare",
    "gen-root-ssl-ca",
]

[tasks.gen-account-web-ssl-cert]
extend = "gen-ca-serv-ssl-cert"
private = true
workspace = false
# We cannot use ${SERV_NAME} in condition because env is applied after condition
condition = { files_not_exist = ["${TEST_CERTS_DIR}/rust-account-web.key.pem", "${TEST_CERTS_DIR}/rust-account-web.crt.pem"] }
env = { SERV_NAME = "rust-account-web" }
dependencies = [ # seems dependencies are not inherited in current 'cargo make' version
    "generate-ca-ssl-certs-prepare",
    "gen-root-ssl-ca",
]



[tasks.generate-ca-ssl-certs]
workspace = false
dependencies = [
    "generate-ca-ssl-certs-prepare",
    "gen-root-ssl-ca",
    "gen-database-ssl-cert",
    "gen-account-soa-ssl-cert",
    "gen-account-web-ssl-cert",
]



[tasks.regenerate-ca-ssl-certs]
workspace = false
dependencies = [
    "delete-ca-ssl-certs",
    "generate-ca-ssl-certs",
]



########################################################################################################################
#                                         Optional aliases                                                             #
########################################################################################################################

[tasks.generate-ca-certs]
workspace = false
alias = "generate-ca-ssl-certs"
[tasks.gen-ca-certs]
workspace = false
alias = "generate-ca-ssl-certs"

[tasks.regenerate-ca-certs]
alias = "regenerate-ca-ssl-certs"
[tasks.regen-ssl-ca-certs]
alias = "regenerate-ca-ssl-certs"
[tasks.regen-ca-ssl-certs]
alias = "regenerate-ca-ssl-certs"
[tasks.regen-ca-certs]
alias = "regenerate-ca-ssl-certs"

