
[tasks.init_docker_vars]
command = "cp"
args = [
    "${CARGO_MAKE_CARGO_HOME}/bin/cargo-patch-subdep-ver",
    "${ROOT_PROJECT_DIR}/target/externals/"
]
dependencies = [ "init_docker_vars_0" ]
[tasks.init_docker_vars_0]
command = "mkdir"
args = [ "-p", "${ROOT_PROJECT_DIR}/target/externals" ]


[tasks.printenv]
command = "printenv"
[tasks.temp-fail]
private = true
command = "unknown-cmd"


# TODO: How to reuse it?
[tasks.private_docker_build_prepare_labels]
env = { DOCKER_IMAGE_LABELS = [
    "--label", "PROJECT_NAME=${CARGO_MAKE_PROJECT_NAME}",
    "--label", "PACKAGE_NAME=${CARGO_MAKE_PROJECT_NAME}",
    "--label", "PROJECT_VERSION=${CARGO_MAKE_CRATE_VERSION}",
    "--label", "PACKAGE_VERSION=${CARGO_MAKE_CRATE_VERSION}",
    # Hm... CARGO_MAKE_PROJECT_VERSION is not set?!
    #"--label", "PROJECT_VERSION=${CARGO_MAKE_PROJECT_VERSION}",
    #"--label", "PACKAGE_VERSION=${CARGO_MAKE_PROJECT_VERSION}",
    "--label", "GIT_BRANCH=${CARGO_MAKE_GIT_BRANCH}",
    "--label", "GIT_USER_NAME=${CARGO_MAKE_GIT_USER_NAME}",
    "--label", "GIT_HEAD_LAST_COMMIT_HASH=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH}",
    "--label", "GIT_HEAD_LAST_COMMIT_HASH_PREFIX=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH_PREFIX}",
] }



[tasks.build-docker-multistage-release-impl]
#private = true
condition = { profiles = [ "prod", "production", "release" ] }
# We use SINGLE docker-file to cache full build result and just copy resulting 'exe' files
# into prod/release docker images
cwd = "${ROOT_PROJECT_DIR}"
command = "docker"
args = [
    "build",
    "--file", "${ROOT_PROJECT_DIR}/docker/Dockerfile-multistage-manually-optimized",

    "--target", "${DOCKER_IMAGE_TARGET}",
    "--tag", "${DOCKER_IMAGE_TAG}",

    "--build-arg", "RUN_RUST_BACKTRACE=${RUST_BACKTRACE}",

    # Now no root package (pure workspace)
    # "--label", "ROOT_PROJECT_NAME=${ROOT_PROJECT_NAME}",

    "--label", "PACKAGE_NAME=${CARGO_MAKE_PROJECT_NAME}",
    "--label", "PROJECT_VERSION=${CARGO_MAKE_CRATE_VERSION}",
    "--label", "PACKAGE_VERSION=${CARGO_MAKE_CRATE_VERSION}",

    "--label", "GIT_BRANCH=${CARGO_MAKE_GIT_BRANCH}",
    "--label", "GIT_USER_NAME=${CARGO_MAKE_GIT_USER_NAME}",
    "--label", "GIT_HEAD_LAST_COMMIT_HASH=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH}",
    "--label", "GIT_HEAD_LAST_COMMIT_HASH_PREFIX=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH_PREFIX}",
    ".",]
workspace = false
dependencies = [
    ### -----------------------------------------------------------------------
    ### This comment was added for 'root' task
    #
    # Use it on higher level since if we put it there unpredicted/default
    # build/test tasks are called instead of our customized ones.
    #
    # "build", "test",
    ### -----------------------------------------------------------------------

    "build",
    # Disabled now to avoid 'test' phase when 'docker-build is called directly'.
    # 'package'/'install' tasks have 'test' task.
    # "test",
    "init_docker_vars",
    "private_docker_build_prepare_labels",
]


[tasks.build-docker-release]
alias = "build-docker-multistage-release-impl"


# It is not used now since it is very expensive and time and disk space consuming task.
# This approach is used for preod/release,
# but for debug cheap task 'build-docker-debug-local' is used now.
#
#[tasks.build-docker-multistage-debug]
#private = true
#condition = { profiles = [ "dev", "develop", "development", "debug" ] }
#cwd = "${ROOT_PROJECT_DIR}"
#command = "docker"
#args = ["build",
#    "--file", "${PROJECT_DIR}/docker/Dockerfile",
#    "--tag", "${DOCKER_IMAGE_TAG}-debug",
#
#    "--build-arg", "RELEASE_OR_DEBUG_BUILD_PARAM=",
#    "--build-arg", "RELEASE_OR_DEBUG_TARGET_DIR=./target/debug",
#    "--build-arg", "RUN_RUST_BACKTRACE=${RUST_BACKTRACE}",
#
#    # ?? How to reuse it?
#    #${DOCKER_IMAGE_LABELS},
#
#    "--label", "PROJECT_NAME=${CARGO_MAKE_PROJECT_NAME}",
#    "--label", "PACKAGE_NAME=${CARGO_MAKE_PROJECT_NAME}",
#    "--label", "PROJECT_VERSION=${CARGO_MAKE_CRATE_VERSION}",
#    "--label", "PACKAGE_VERSION=${CARGO_MAKE_CRATE_VERSION}",
#    "--label", "GIT_BRANCH=${CARGO_MAKE_GIT_BRANCH}",
#    "--label", "GIT_USER_NAME=${CARGO_MAKE_GIT_USER_NAME}",
#    "--label", "GIT_HEAD_LAST_COMMIT_HASH=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH}",
#    "--label", "GIT_HEAD_LAST_COMMIT_HASH_PREFIX=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH_PREFIX}",
#    ".",]
#workspace = false
#dependencies = [
#    "build",
#    "test",
#    "init_docker_vars",
#    "private_docker_build_prepare_labels",
#]



[tasks.build-docker]
workspace = false
dependencies = [
    "build-docker-release",        # will be called only for prod/release profile
    "build-docker-debug-local", # will be called only for dev/debug profile
]

# Aliase for calling from root/workspace makefile (I do not know why it does not work without when we use 'integration-tests')
#[tasks.build-docker-member]
#alias = "build-docker"



[tasks.get-ubuntu-info-vars]
workspace = false
# get Ubuntu bersion => cat /etc/os-release | grep VERSION_ID | sed -e "s/^VERSION_ID=\"//" -e "s/\"//"
env = { UBUNTU_VERSION = { script = ["cat /etc/os-release | grep VERSION_ID | sed -e \"s/^VERSION_ID=\\\"//\"  -e \"s/\\\"//\""] } }
script = "echo UBUNTU_VERSION: ${UBUNTU_VERSION}"


[tasks.build-docker-debug-local]
condition = { profiles = [ "dev", "development", "debug" ] }
command = "docker"
cwd = "${ROOT_PROJECT_DIR}"
args = [
    "build",
    "--file", "${PROJECT_DIR}/docker/Dockerfile-local",
    "--tag", "${DOCKER_IMAGE_TAG}-debug-local",

    "--build-arg", "UBUNTU_VERSION=${UBUNTU_VERSION}",
    "--build-arg", "RUN_RUST_BACKTRACE=${RUST_BACKTRACE}",

    # ?? How to reuse it?
    #${DOCKER_IMAGE_LABELS},

    "--label", "PROJECT_NAME=${CARGO_MAKE_PROJECT_NAME}",
    "--label", "PACKAGE_NAME=${CARGO_MAKE_PROJECT_NAME}",
    "--label", "PROJECT_VERSION=${CARGO_MAKE_CRATE_VERSION}",
    "--label", "PACKAGE_VERSION=${CARGO_MAKE_CRATE_VERSION}",
    "--label", "GIT_BRANCH=${CARGO_MAKE_GIT_BRANCH}",
    "--label", "GIT_USER_NAME=${CARGO_MAKE_GIT_USER_NAME}",
    "--label", "GIT_HEAD_LAST_COMMIT_HASH=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH}",
    "--label", "GIT_HEAD_LAST_COMMIT_HASH_PREFIX=${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH_PREFIX}",
    ".",]
workspace = false
dependencies = [
    "init_docker_vars",
    "get-ubuntu-info-vars",
    "build",
    # Disabled now to avoid 'test' phase when 'docker-build is called directly'.
    # 'package'/'install' tasks have 'test' task.
    # "test",
    "private_docker_build_prepare_labels",
]

# Aliase for calling from root/workspace makefile (I do not know why it does not work without when we use 'integration-tests')
[tasks.build-docker-debug-local-member]
alias = "build-docker-debug-local"



########################################################################################################################
#                                         Optional aliases                                                             #
########################################################################################################################

[tasks.build-debug-local-docker]
alias = "build-docker-debug-local"
[tasks.build-local-debug-docker]
alias = "build-docker-debug-local"

[tasks.build-debug-docker]
alias = "build-docker-debug"
[tasks.build-release-docker]
alias = "build-docker-release"
[tasks.build-prod-docker]
alias = "build-docker-release"
[tasks.build-docker-prod]
alias = "build-docker-release"
